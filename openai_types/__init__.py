# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-12-17T15:56:49+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from msgspec import Struct, field


class AddUploadPartRequest(Struct):
    data: bytes
    """
    The chunk of bytes for this Part.

    """


class Object(str, Enum):
    """
    The object type, which is always `assistant`.
    """

    assistant = 'assistant'


class CodeInterpreter(Struct):
    file_ids: List[str] = []
    """
    A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.

    """


class FileSearch(Struct):
    vector_store_ids: Optional[List[str]] = None
    """
    The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.

    """


class ToolResources(Struct):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: Optional[CodeInterpreter] = None
    file_search: Optional[FileSearch] = None


class Type(str, Enum):
    """
    The type of tool being defined: `code_interpreter`
    """

    code_interpreter = 'code_interpreter'


class AssistantToolsCode(Struct):
    type: Type
    """
    The type of tool being defined: `code_interpreter`
    """


class Type1(str, Enum):
    """
    The type of tool being defined: `file_search`
    """

    file_search = 'file_search'


class AssistantToolsFileSearchTypeOnly(Struct):
    type: Type1
    """
    The type of tool being defined: `file_search`
    """


class Type3(str, Enum):
    """
    The type of tool being defined: `function`
    """

    function = 'function'


class AssistantsApiResponseFormatOption1(str, Enum):
    """
    `auto` is the default value

    """

    auto = 'auto'


class AssistantsApiToolChoiceOption1(str, Enum):
    """
    `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.

    """

    none = 'none'
    auto = 'auto'
    required = 'required'


class Type4(str, Enum):
    """
    The type of the tool. If type is `function`, the function name must be set
    """

    function = 'function'
    code_interpreter = 'code_interpreter'
    file_search = 'file_search'


class Function(Struct):
    name: str
    """
    The name of the function to call.
    """


class AssistantsNamedToolChoice(Struct):
    """
    Specifies a tool the model should use. Use to force the model to call a specific tool.
    """

    type: Type4
    """
    The type of the tool. If type is `function`, the function name must be set
    """
    function: Optional[Function] = None


class AudioResponseFormat(str, Enum):
    """
    The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.

    """

    json = 'json'
    text = 'text'
    srt = 'srt'
    verbose_json = 'verbose_json'
    vtt = 'vtt'


class Project(Struct):
    """
    The project that the action was scoped to. Absent for actions not scoped to projects.
    """

    id: Optional[str] = None
    """
    The project ID.
    """
    name: Optional[str] = None
    """
    The project title.
    """


class Data(Struct):
    """
    The payload used to create the API key.
    """

    scopes: Optional[List[str]] = None
    """
    A list of scopes allowed for the API key, e.g. `["api.model.request"]`
    """


class ApiKeyCreated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The tracking ID of the API key.
    """
    data: Optional[Data] = None
    """
    The payload used to create the API key.
    """


class ChangesRequested(Struct):
    """
    The payload used to update the API key.
    """

    scopes: Optional[List[str]] = None
    """
    A list of scopes allowed for the API key, e.g. `["api.model.request"]`
    """


class ApiKeyUpdated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The tracking ID of the API key.
    """
    changes_requested: Optional[ChangesRequested] = None
    """
    The payload used to update the API key.
    """


class ApiKeyDeleted(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The tracking ID of the API key.
    """


class Data1(Struct):
    """
    The payload used to create the invite.
    """

    email: Optional[str] = None
    """
    The email invited to the organization.
    """
    role: Optional[str] = None
    """
    The role the email was invited to be. Is either `owner` or `member`.
    """


class InviteSent(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The ID of the invite.
    """
    data: Optional[Data1] = None
    """
    The payload used to create the invite.
    """


class InviteAccepted(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The ID of the invite.
    """


class InviteDeleted(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The ID of the invite.
    """


class LoginFailed(Struct):
    """
    The details for events with this `type`.
    """

    error_code: Optional[str] = None
    """
    The error code of the failure.
    """
    error_message: Optional[str] = None
    """
    The error message of the failure.
    """


class LogoutFailed(Struct):
    """
    The details for events with this `type`.
    """

    error_code: Optional[str] = None
    """
    The error code of the failure.
    """
    error_message: Optional[str] = None
    """
    The error message of the failure.
    """


class Settings(Struct):
    threads_ui_visibility: Optional[str] = None
    """
    Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
    """
    usage_dashboard_visibility: Optional[str] = None
    """
    Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
    """


class ChangesRequested1(Struct):
    """
    The payload used to update the organization settings.
    """

    title: Optional[str] = None
    """
    The organization title.
    """
    description: Optional[str] = None
    """
    The organization description.
    """
    name: Optional[str] = None
    """
    The organization name.
    """
    settings: Optional[Settings] = None


class OrganizationUpdated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The organization ID.
    """
    changes_requested: Optional[ChangesRequested1] = None
    """
    The payload used to update the organization settings.
    """


class Data2(Struct):
    """
    The payload used to create the project.
    """

    name: Optional[str] = None
    """
    The project name.
    """
    title: Optional[str] = None
    """
    The title of the project as seen on the dashboard.
    """


class ProjectCreated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The project ID.
    """
    data: Optional[Data2] = None
    """
    The payload used to create the project.
    """


class ChangesRequested2(Struct):
    """
    The payload used to update the project.
    """

    title: Optional[str] = None
    """
    The title of the project as seen on the dashboard.
    """


class ProjectUpdated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The project ID.
    """
    changes_requested: Optional[ChangesRequested2] = None
    """
    The payload used to update the project.
    """


class ProjectArchived(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The project ID.
    """


class ChangesRequested3(Struct):
    """
    The payload used to update the rate limits.
    """

    max_requests_per_1_minute: Optional[int] = None
    """
    The maximum requests per minute.
    """
    max_tokens_per_1_minute: Optional[int] = None
    """
    The maximum tokens per minute.
    """
    max_images_per_1_minute: Optional[int] = None
    """
    The maximum images per minute. Only relevant for certain models.
    """
    max_audio_megabytes_per_1_minute: Optional[int] = None
    """
    The maximum audio megabytes per minute. Only relevant for certain models.
    """
    max_requests_per_1_day: Optional[int] = None
    """
    The maximum requests per day. Only relevant for certain models.
    """
    batch_1_day_max_input_tokens: Optional[int] = None
    """
    The maximum batch input tokens per day. Only relevant for certain models.
    """


class RateLimitUpdated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The rate limit ID
    """
    changes_requested: Optional[ChangesRequested3] = None
    """
    The payload used to update the rate limits.
    """


class RateLimitDeleted(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The rate limit ID
    """


class Data3(Struct):
    """
    The payload used to create the service account.
    """

    role: Optional[str] = None
    """
    The role of the service account. Is either `owner` or `member`.
    """


class ServiceAccountCreated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The service account ID.
    """
    data: Optional[Data3] = None
    """
    The payload used to create the service account.
    """


class ChangesRequested4(Struct):
    """
    The payload used to updated the service account.
    """

    role: Optional[str] = None
    """
    The role of the service account. Is either `owner` or `member`.
    """


class ServiceAccountUpdated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The service account ID.
    """
    changes_requested: Optional[ChangesRequested4] = None
    """
    The payload used to updated the service account.
    """


class ServiceAccountDeleted(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The service account ID.
    """


class Data4(Struct):
    """
    The payload used to add the user to the project.
    """

    role: Optional[str] = None
    """
    The role of the user. Is either `owner` or `member`.
    """


class UserAdded(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The user ID.
    """
    data: Optional[Data4] = None
    """
    The payload used to add the user to the project.
    """


class ChangesRequested5(Struct):
    """
    The payload used to update the user.
    """

    role: Optional[str] = None
    """
    The role of the user. Is either `owner` or `member`.
    """


class UserUpdated(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The project ID.
    """
    changes_requested: Optional[ChangesRequested5] = None
    """
    The payload used to update the user.
    """


class UserDeleted(Struct):
    """
    The details for events with this `type`.
    """

    id: Optional[str] = None
    """
    The user ID.
    """


class Type5(str, Enum):
    """
    The type of actor. Is either `session` or `api_key`.
    """

    session = 'session'
    api_key = 'api_key'


class Type6(str, Enum):
    """
    The type of API key. Can be either `user` or `service_account`.
    """

    user = 'user'
    service_account = 'service_account'


class AuditLogActorServiceAccount(Struct):
    """
    The service account that performed the audit logged action.
    """

    id: Optional[str] = None
    """
    The service account id.
    """


class AuditLogActorUser(Struct):
    """
    The user who performed the audit logged action.
    """

    id: Optional[str] = None
    """
    The user id.
    """
    email: Optional[str] = None
    """
    The user email.
    """


class AuditLogEventType(str, Enum):
    """
    The event type.
    """

    api_key_created = 'api_key.created'
    api_key_updated = 'api_key.updated'
    api_key_deleted = 'api_key.deleted'
    invite_sent = 'invite.sent'
    invite_accepted = 'invite.accepted'
    invite_deleted = 'invite.deleted'
    login_succeeded = 'login.succeeded'
    login_failed = 'login.failed'
    logout_succeeded = 'logout.succeeded'
    logout_failed = 'logout.failed'
    organization_updated = 'organization.updated'
    project_created = 'project.created'
    project_updated = 'project.updated'
    project_archived = 'project.archived'
    service_account_created = 'service_account.created'
    service_account_updated = 'service_account.updated'
    service_account_deleted = 'service_account.deleted'
    rate_limit_updated = 'rate_limit.updated'
    rate_limit_deleted = 'rate_limit.deleted'
    user_added = 'user.added'
    user_updated = 'user.updated'
    user_deleted = 'user.deleted'


class Type7(str, Enum):
    """
    Always `auto`.
    """

    auto = 'auto'


class AutoChunkingStrategyRequestParam(Struct):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """

    type: Type7
    """
    Always `auto`.
    """


class Object1(str, Enum):
    """
    The object type, which is always `batch`.
    """

    batch = 'batch'


class Datum(Struct):
    code: Optional[str] = None
    """
    An error code identifying the error type.
    """
    message: Optional[str] = None
    """
    A human-readable message providing more details about the error.
    """
    param: Optional[str] = None
    """
    The name of the parameter that caused the error, if applicable.
    """
    line: Optional[int] = None
    """
    The line number of the input file where the error occurred, if applicable.
    """


class Errors(Struct):
    object: Optional[str] = None
    """
    The object type, which is always `list`.
    """
    data: Optional[List[Datum]] = None


class Status(str, Enum):
    """
    The current status of the batch.
    """

    validating = 'validating'
    failed = 'failed'
    in_progress = 'in_progress'
    finalizing = 'finalizing'
    completed = 'completed'
    expired = 'expired'
    cancelling = 'cancelling'
    cancelled = 'cancelled'


class RequestCounts(Struct):
    """
    The request counts for different statuses within the batch.
    """

    total: int
    """
    Total number of requests in the batch.
    """
    completed: int
    """
    Number of requests that have been completed successfully.
    """
    failed: int
    """
    Number of requests that have failed.
    """


class Batch(Struct):
    id: str
    object: Object1
    """
    The object type, which is always `batch`.
    """
    endpoint: str
    """
    The OpenAI API endpoint used by the batch.
    """
    input_file_id: str
    """
    The ID of the input file for the batch.
    """
    completion_window: str
    """
    The time frame within which the batch should be processed.
    """
    status: Status
    """
    The current status of the batch.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the batch was created.
    """
    errors: Optional[Errors] = None
    output_file_id: Optional[str] = None
    """
    The ID of the file containing the outputs of successfully executed requests.
    """
    error_file_id: Optional[str] = None
    """
    The ID of the file containing the outputs of requests with errors.
    """
    in_progress_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch started processing.
    """
    expires_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch will expire.
    """
    finalizing_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch started finalizing.
    """
    completed_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch was completed.
    """
    failed_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch failed.
    """
    expired_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch expired.
    """
    cancelling_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch started cancelling.
    """
    cancelled_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the batch was cancelled.
    """
    request_counts: Optional[RequestCounts] = None
    """
    The request counts for different statuses within the batch.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class Method(str, Enum):
    """
    The HTTP method to be used for the request. Currently only `POST` is supported.
    """

    POST = 'POST'


class BatchRequestInput(Struct):
    """
    The per-line object of the batch input file
    """

    custom_id: Optional[str] = None
    """
    A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.
    """
    method: Optional[Method] = None
    """
    The HTTP method to be used for the request. Currently only `POST` is supported.
    """
    url: Optional[str] = None
    """
    The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.
    """


class Response(Struct):
    status_code: Optional[int] = None
    """
    The HTTP status code of the response
    """
    request_id: Optional[str] = None
    """
    An unique identifier for the OpenAI API request. Please include this request ID when contacting support.
    """
    body: Optional[Dict[str, Any]] = None
    """
    The JSON body of the response
    """


class Error(Struct):
    """
    For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
    """

    code: Optional[str] = None
    """
    A machine-readable error code.
    """
    message: Optional[str] = None
    """
    A human-readable error message.
    """


class BatchRequestOutput(Struct):
    """
    The per-line object of the batch output and error files
    """

    id: Optional[str] = None
    custom_id: Optional[str] = None
    """
    A developer-provided per-request id that will be used to match outputs to inputs.
    """
    response: Optional[Response] = None
    error: Optional[Error] = None
    """
    For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
    """


class CancelUploadRequest(Struct):
    pass


class ChatCompletionFunctionCallOption(Struct):
    """
    Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.

    """

    name: str
    """
    The name of the function to call.
    """


class Type8(str, Enum):
    """
    The type of the tool. Currently, only `function` is supported.
    """

    function = 'function'


class Function1(Struct):
    """
    The function that the model called.
    """

    name: str
    """
    The name of the function to call.
    """
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    """


class ChatCompletionMessageToolCall(Struct):
    id: str
    """
    The ID of the tool call.
    """
    type: Type8
    """
    The type of the tool. Currently, only `function` is supported.
    """
    function: Function1
    """
    The function that the model called.
    """


class Function2(Struct):
    name: Optional[str] = None
    """
    The name of the function to call.
    """
    arguments: Optional[str] = None
    """
    The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    """


class ChatCompletionMessageToolCallChunk(Struct):
    index: int
    id: Optional[str] = None
    """
    The ID of the tool call.
    """
    type: Optional[Type8] = None
    """
    The type of the tool. Currently, only `function` is supported.
    """
    function: Optional[Function2] = None


ChatCompletionMessageToolCalls = List[ChatCompletionMessageToolCall]


class ChatCompletionModality(str, Enum):
    text = 'text'
    audio = 'audio'


ChatCompletionModalities = Optional[List[ChatCompletionModality]]


class Function3(Struct):
    name: str
    """
    The name of the function to call.
    """


class ChatCompletionNamedToolChoice(Struct):
    """
    Specifies a tool the model should use. Use to force the model to call a specific function.
    """

    type: Type8
    """
    The type of the tool. Currently, only `function` is supported.
    """
    function: Function3


class Role(str, Enum):
    """
    The role of the messages author, in this case `assistant`.
    """

    assistant = 'assistant'


class Audio(Struct):
    """
    Data about a previous audio response from the model.
    [Learn more](/docs/guides/audio).

    """

    id: str
    """
    Unique identifier for a previous audio response from the model.

    """


class FunctionCall(Struct):
    """
    Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
    """

    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    """
    name: str
    """
    The name of the function to call.
    """


class Role1(str, Enum):
    """
    The role of the messages author, in this case `function`.
    """

    function = 'function'


class ChatCompletionRequestFunctionMessage(Struct):
    role: Role1
    """
    The role of the messages author, in this case `function`.
    """
    content: Optional[str] = None
    """
    The contents of the function message.
    """
    name: str
    """
    The name of the function to call.
    """


class Type11(str, Enum):
    """
    The type of the content part. Always `input_audio`.
    """

    input_audio = 'input_audio'


class Format(str, Enum):
    """
    The format of the encoded audio data. Currently supports "wav" and "mp3".

    """

    wav = 'wav'
    mp3 = 'mp3'


class InputAudio(Struct):
    data: str
    """
    Base64 encoded audio data.
    """
    format: Format
    """
    The format of the encoded audio data. Currently supports "wav" and "mp3".

    """


class ChatCompletionRequestMessageContentPartAudio(Struct):
    """
    Learn about [audio inputs](/docs/guides/audio).

    """

    type: Type11
    """
    The type of the content part. Always `input_audio`.
    """
    input_audio: InputAudio


class Type12(str, Enum):
    """
    The type of the content part.
    """

    image_url = 'image_url'


class Detail(str, Enum):
    """
    Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageUrl(Struct):
    url: str
    """
    Either a URL of the image or the base64 encoded image data.
    """
    detail: Detail = 'auto'
    """
    Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
    """


class ChatCompletionRequestMessageContentPartImage(Struct):
    """
    Learn about [image inputs](/docs/guides/vision).

    """

    type: Type12
    """
    The type of the content part.
    """
    image_url: ImageUrl


class Type13(str, Enum):
    """
    The type of the content part.
    """

    refusal = 'refusal'


class ChatCompletionRequestMessageContentPartRefusal(Struct):
    type: Type13
    """
    The type of the content part.
    """
    refusal: str
    """
    The refusal message generated by the model.
    """


class Type14(str, Enum):
    """
    The type of the content part.
    """

    text = 'text'


class ChatCompletionRequestMessageContentPartText(Struct):
    """
    Learn about [text inputs](/docs/guides/text-generation).

    """

    type: Type14
    """
    The type of the content part.
    """
    text: str
    """
    The text content.
    """


class Role2(str, Enum):
    """
    The role of the messages author, in this case `system`.
    """

    system = 'system'


ChatCompletionRequestSystemMessageContentPart = (
    ChatCompletionRequestMessageContentPartText
)


class Role3(str, Enum):
    """
    The role of the messages author, in this case `tool`.
    """

    tool = 'tool'


ChatCompletionRequestToolMessageContentPart = (
    ChatCompletionRequestMessageContentPartText
)


class Role4(str, Enum):
    """
    The role of the messages author, in this case `user`.
    """

    user = 'user'


ChatCompletionRequestUserMessageContentPart = Union[
    ChatCompletionRequestMessageContentPartText,
    ChatCompletionRequestMessageContentPartImage,
    ChatCompletionRequestMessageContentPartAudio,
]


class Role5(str, Enum):
    """
    The role of the author of this message.
    """

    assistant = 'assistant'


class Audio1(Struct):
    """
    If the audio output modality is requested, this object contains data
    about the audio response from the model. [Learn more](/docs/guides/audio).

    """

    id: str
    """
    Unique identifier for this audio response.
    """
    expires_at: int
    """
    The Unix timestamp (in seconds) for when this audio response will
    no longer be accessible on the server for use in multi-turn
    conversations.

    """
    data: str
    """
    Base64 encoded audio bytes generated by the model, in the format
    specified in the request.

    """
    transcript: str
    """
    Transcript of the audio generated by the model.
    """


class ChatCompletionResponseMessage(Struct):
    """
    A chat completion message generated by the model.
    """

    content: Optional[str] = None
    """
    The contents of the message.
    """
    refusal: Optional[str] = None
    """
    The refusal message generated by the model.
    """
    role: Role5
    """
    The role of the author of this message.
    """
    tool_calls: Optional[ChatCompletionMessageToolCalls] = None
    function_call: Optional[FunctionCall] = None
    """
    Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
    """
    audio: Optional[Audio1] = None
    """
    If the audio output modality is requested, this object contains data
    about the audio response from the model. [Learn more](/docs/guides/audio).

    """


class ChatCompletionRole(str, Enum):
    """
    The role of the author of a message
    """

    system = 'system'
    user = 'user'
    assistant = 'assistant'
    tool = 'tool'
    function = 'function'


class ChatCompletionStreamOptions(Struct):
    """
    Options for streaming response. Only set this when you set `stream: true`.

    """

    include_usage: Optional[bool] = None
    """
    If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.

    """


class FunctionCall2(Struct):
    """
    Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
    """

    arguments: Optional[str] = None
    """
    The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    """
    name: Optional[str] = None
    """
    The name of the function to call.
    """


class Role6(str, Enum):
    """
    The role of the author of this message.
    """

    system = 'system'
    user = 'user'
    assistant = 'assistant'
    tool = 'tool'


class ChatCompletionStreamResponseDelta(Struct):
    """
    A chat completion delta generated by streamed model responses.
    """

    content: Optional[str] = None
    """
    The contents of the chunk message.
    """
    function_call: Optional[FunctionCall2] = None
    """
    Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
    """
    tool_calls: Optional[List[ChatCompletionMessageToolCallChunk]] = None
    role: Optional[Role6] = None
    """
    The role of the author of this message.
    """
    refusal: Optional[str] = None
    """
    The refusal message generated by the model.
    """


class TopLogprob(Struct):
    token: str
    """
    The token.
    """
    logprob: float
    """
    The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
    """
    bytes: Optional[List[int]] = None
    """
    A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
    """


class ChatCompletionTokenLogprob(Struct):
    token: str
    """
    The token.
    """
    logprob: float
    """
    The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
    """
    bytes: Optional[List[int]] = None
    """
    A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
    """
    top_logprobs: List[TopLogprob]
    """
    List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
    """


class Type15(str, Enum):
    """
    The type of the tool. Currently, only `function` is supported.
    """

    function = 'function'


class ChatCompletionToolChoiceOption1(str, Enum):
    """
    `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.

    """

    none = 'none'
    auto = 'auto'
    required = 'required'


ChatCompletionToolChoiceOption = Union[
    ChatCompletionToolChoiceOption1, ChatCompletionNamedToolChoice
]


class CompleteUploadRequest(Struct):
    part_ids: List[str]
    """
    The ordered list of Part IDs.

    """
    md5: Optional[str] = None
    """
    The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.

    """


class CompletionTokensDetails(Struct):
    """
    Breakdown of tokens used in a completion.
    """

    accepted_prediction_tokens: Optional[int] = None
    """
    When using Predicted Outputs, the number of tokens in the
    prediction that appeared in the completion.

    """
    audio_tokens: Optional[int] = None
    """
    Audio input tokens generated by the model.
    """
    reasoning_tokens: Optional[int] = None
    """
    Tokens generated by the model for reasoning.
    """
    rejected_prediction_tokens: Optional[int] = None
    """
    When using Predicted Outputs, the number of tokens in the
    prediction that did not appear in the completion. However, like
    reasoning tokens, these tokens are still counted in the total
    completion tokens for purposes of billing, output, and context window
    limits.

    """


class PromptTokensDetails(Struct):
    """
    Breakdown of tokens used in the prompt.
    """

    audio_tokens: Optional[int] = None
    """
    Audio input tokens present in the prompt.
    """
    cached_tokens: Optional[int] = None
    """
    Cached tokens present in the prompt.
    """


class CompletionUsage(Struct):
    """
    Usage statistics for the completion request.
    """

    completion_tokens: int
    """
    Number of tokens in the generated completion.
    """
    prompt_tokens: int
    """
    Number of tokens in the prompt.
    """
    total_tokens: int
    """
    Total number of tokens used in the request (prompt + completion).
    """
    completion_tokens_details: Optional[CompletionTokensDetails] = None
    """
    Breakdown of tokens used in a completion.
    """
    prompt_tokens_details: Optional[PromptTokensDetails] = None
    """
    Breakdown of tokens used in the prompt.
    """


class Object2(str, Enum):
    organization_costs_result = 'organization.costs.result'


class Amount(Struct):
    """
    The monetary value in its associated currency.
    """

    value: Optional[float] = None
    """
    The numeric value of the cost.
    """
    currency: Optional[str] = None
    """
    Lowercase ISO-4217 currency e.g. "usd"
    """


class CostsResult(Struct):
    """
    The aggregated costs details of the specific time bucket.
    """

    object: Object2
    amount: Optional[Amount] = None
    """
    The monetary value in its associated currency.
    """
    line_item: Optional[str] = None
    """
    When `group_by=line_item`, this field provides the line item of the grouped costs result.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped costs result.
    """


class Model(str, Enum):
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """

    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class CodeInterpreter1(Struct):
    file_ids: List[str] = []
    """
    A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.

    """


class Type16(str, Enum):
    """
    Always `auto`.
    """

    auto = 'auto'


class ChunkingStrategy(Struct):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """

    type: Type16
    """
    Always `auto`.
    """


class Type17(str, Enum):
    """
    Always `static`.
    """

    static = 'static'


class Static(Struct):
    max_chunk_size_tokens: int
    """
    The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
    """
    chunk_overlap_tokens: int
    """
    The number of tokens that overlap between chunks. The default value is `400`.

    Note that the overlap must not exceed half of `max_chunk_size_tokens`.

    """


class ChunkingStrategy1(Struct):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """

    type: Type17
    """
    Always `static`.
    """
    static: Static


class VectorStore(Struct):
    file_ids: Optional[List[str]] = None
    """
    A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.

    """
    chunking_strategy: Optional[Union[ChunkingStrategy, ChunkingStrategy1]] = None
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class FileSearch2(Struct):
    vector_store_ids: List[str]
    """
    The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.

    """
    vector_stores: Optional[List[VectorStore]] = None
    """
    A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.

    """


class Type18(str, Enum):
    """
    Always `auto`.
    """

    auto = 'auto'


class ChunkingStrategy2(Struct):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """

    type: Type18
    """
    Always `auto`.
    """


class Type19(str, Enum):
    """
    Always `static`.
    """

    static = 'static'


class ChunkingStrategy3(Struct):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """

    type: Type19
    """
    Always `static`.
    """
    static: Static


class VectorStore1(Struct):
    file_ids: Optional[List[str]] = None
    """
    A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.

    """
    chunking_strategy: Optional[Union[ChunkingStrategy2, ChunkingStrategy3]] = None
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class FileSearch3(Struct):
    vector_stores: List[VectorStore1]
    """
    A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.

    """
    vector_store_ids: Optional[List[str]] = None
    """
    The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.

    """


class ToolResources1(Struct):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: Optional[CodeInterpreter1] = None
    file_search: Optional[Union[FileSearch2, FileSearch3]] = None


class FinishReason(str, Enum):
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.

    """

    stop = 'stop'
    length = 'length'
    function_call = 'function_call'
    content_filter = 'content_filter'


class Choice(Struct):
    finish_reason: FinishReason
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.

    """
    index: int
    """
    The index of the choice in the list of choices.
    """
    message: ChatCompletionResponseMessage


class Object3(str, Enum):
    """
    The object type, which is always `chat.completion`.
    """

    chat_completion = 'chat.completion'


class CreateChatCompletionFunctionResponse(Struct):
    """
    Represents a chat completion response returned by model, based on the provided input.
    """

    id: str
    """
    A unique identifier for the chat completion.
    """
    choices: List[Choice]
    """
    A list of chat completion choices. Can be more than one if `n` is greater than 1.
    """
    created: int
    """
    The Unix timestamp (in seconds) of when the chat completion was created.
    """
    model: str
    """
    The model used for the chat completion.
    """
    object: Object3
    """
    The object type, which is always `chat.completion`.
    """
    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.

    Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.

    """
    usage: Optional[CompletionUsage] = None


class CreateChatCompletionImageResponse(Struct):
    """
    Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
    """


class Model1(str, Enum):
    """
    ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
    """

    o1_preview = 'o1-preview'
    o1_preview_2024_09_12 = 'o1-preview-2024-09-12'
    o1_mini = 'o1-mini'
    o1_mini_2024_09_12 = 'o1-mini-2024-09-12'
    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_realtime_preview = 'gpt-4o-realtime-preview'
    gpt_4o_realtime_preview_2024_10_01 = 'gpt-4o-realtime-preview-2024-10-01'
    gpt_4o_audio_preview = 'gpt-4o-audio-preview'
    gpt_4o_audio_preview_2024_10_01 = 'gpt-4o-audio-preview-2024-10-01'
    chatgpt_4o_latest = 'chatgpt-4o-latest'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0301 = 'gpt-3.5-turbo-0301'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class Voice(str, Enum):
    """
    The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).

    """

    alloy = 'alloy'
    ash = 'ash'
    ballad = 'ballad'
    coral = 'coral'
    echo = 'echo'
    sage = 'sage'
    shimmer = 'shimmer'
    verse = 'verse'


class Format1(str, Enum):
    """
    Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
    `opus`, or `pcm16`.

    """

    wav = 'wav'
    mp3 = 'mp3'
    flac = 'flac'
    opus = 'opus'
    pcm16 = 'pcm16'


class Audio2(Struct):
    """
    Parameters for audio output. Required when audio output is requested with
    `modalities: ["audio"]`. [Learn more](/docs/guides/audio).

    """

    voice: Voice
    """
    The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).

    """
    format: Format1
    """
    Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
    `opus`, or `pcm16`.

    """


class ServiceTier(str, Enum):
    """
    Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
      - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
      - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
      - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
      - When not set, the default behavior is 'auto'.

      When this parameter is set, the response body will include the `service_tier` utilized.

    """

    auto = 'auto'
    default = 'default'


Stop = List[str]


class FunctionCall3(str, Enum):
    """
    `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.

    """

    none = 'none'
    auto = 'auto'


class FinishReason1(str, Enum):
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached,
    `content_filter` if content was omitted due to a flag from our content filters,
    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.

    """

    stop = 'stop'
    length = 'length'
    tool_calls = 'tool_calls'
    content_filter = 'content_filter'
    function_call = 'function_call'


class Logprobs(Struct):
    """
    Log probability information for the choice.
    """

    content: Optional[List[ChatCompletionTokenLogprob]] = None
    """
    A list of message content tokens with log probability information.
    """
    refusal: Optional[List[ChatCompletionTokenLogprob]] = None
    """
    A list of message refusal tokens with log probability information.
    """


class Choice1(Struct):
    finish_reason: FinishReason1
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached,
    `content_filter` if content was omitted due to a flag from our content filters,
    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.

    """
    index: int
    """
    The index of the choice in the list of choices.
    """
    message: ChatCompletionResponseMessage
    logprobs: Optional[Logprobs] = None
    """
    Log probability information for the choice.
    """


class ServiceTier1(str, Enum):
    """
    The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
    """

    scale = 'scale'
    default = 'default'


class CreateChatCompletionResponse(Struct):
    """
    Represents a chat completion response returned by model, based on the provided input.
    """

    id: str
    """
    A unique identifier for the chat completion.
    """
    choices: List[Choice1]
    """
    A list of chat completion choices. Can be more than one if `n` is greater than 1.
    """
    created: int
    """
    The Unix timestamp (in seconds) of when the chat completion was created.
    """
    model: str
    """
    The model used for the chat completion.
    """
    object: Object3
    """
    The object type, which is always `chat.completion`.
    """
    service_tier: Optional[ServiceTier1] = None
    """
    The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
    """
    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.

    Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.

    """
    usage: Optional[CompletionUsage] = None


class Choice2(Struct):
    delta: ChatCompletionStreamResponseDelta
    finish_reason: Optional[FinishReason1] = None
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached,
    `content_filter` if content was omitted due to a flag from our content filters,
    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.

    """
    index: int
    """
    The index of the choice in the list of choices.
    """
    logprobs: Optional[Logprobs] = None
    """
    Log probability information for the choice.
    """


class Object5(str, Enum):
    """
    The object type, which is always `chat.completion.chunk`.
    """

    chat_completion_chunk = 'chat.completion.chunk'


class Usage(Struct):
    """
    An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
    When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.

    """

    completion_tokens: int
    """
    Number of tokens in the generated completion.
    """
    prompt_tokens: int
    """
    Number of tokens in the prompt.
    """
    total_tokens: int
    """
    Total number of tokens used in the request (prompt + completion).
    """


class CreateChatCompletionStreamResponse(Struct):
    """
    Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
    """

    id: str
    """
    A unique identifier for the chat completion. Each chunk has the same ID.
    """
    choices: List[Choice2]
    """
    A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
    last chunk if you set `stream_options: {"include_usage": true}`.

    """
    created: int
    """
    The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
    """
    model: str
    """
    The model to generate the completion.
    """
    object: Object5
    """
    The object type, which is always `chat.completion.chunk`.
    """
    service_tier: Optional[ServiceTier1] = None
    """
    The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
    """
    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.
    Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.

    """
    usage: Optional[Usage] = None
    """
    An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
    When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.

    """


class Model2(str, Enum):
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """

    gpt_3_5_turbo_instruct = 'gpt-3.5-turbo-instruct'
    davinci_002 = 'davinci-002'
    babbage_002 = 'babbage-002'


Prompt = Optional[List[int]]


Prompt1Item = List[int]


Prompt1 = Optional[List[Prompt1Item]]


Stop1 = Optional[List[str]]


class CreateCompletionRequest(Struct):
    model: Union[str, Model2]
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """
    prompt: Optional[Union[Optional[str], List[str], Prompt, Prompt1]] = '<|endoftext|>'
    """
    The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

    Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.

    """
    best_of: Optional[int] = 1
    """
    Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

    When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.

    **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.

    """
    echo: Optional[bool] = False
    """
    Echo back the prompt in addition to the completion

    """
    frequency_penalty: Optional[float] = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

    [See more information about frequency and presence penalties.](/docs/guides/text-generation)

    """
    logit_bias: Optional[Dict[str, int]] = None
    """
    Modify the likelihood of specified tokens appearing in the completion.

    Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

    As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.

    """
    logprobs: Optional[int] = None
    """
    Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

    The maximum value for `logprobs` is 5.

    """
    max_tokens: Optional[int] = 16
    """
    The maximum number of [tokens](/tokenizer) that can be generated in the completion.

    The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.

    """
    n: Optional[int] = 1
    """
    How many completions to generate for each prompt.

    **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.

    """
    presence_penalty: Optional[float] = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

    [See more information about frequency and presence penalties.](/docs/guides/text-generation)

    """
    seed: Optional[int] = None
    """
    If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.

    Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.

    """
    stop: Optional[Union[Optional[str], Stop1]] = None
    """
    Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.

    """
    stream: Optional[bool] = False
    """
    Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).

    """
    stream_options: Optional[ChatCompletionStreamOptions] = None
    suffix: Optional[str] = None
    """
    The suffix that comes after a completion of inserted text.

    This parameter is only supported for `gpt-3.5-turbo-instruct`.

    """
    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    user: Optional[str] = None
    """
    A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

    """


class FinishReason3(str, Enum):
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached,
    or `content_filter` if content was omitted due to a flag from our content filters.

    """

    stop = 'stop'
    length = 'length'
    content_filter = 'content_filter'


class Logprobs2(Struct):
    text_offset: Optional[List[int]] = None
    token_logprobs: Optional[List[float]] = None
    tokens: Optional[List[str]] = None
    top_logprobs: Optional[List[Dict[str, float]]] = None


class Choice3(Struct):
    finish_reason: FinishReason3
    """
    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached,
    or `content_filter` if content was omitted due to a flag from our content filters.

    """
    index: int
    logprobs: Optional[Logprobs2] = None
    text: str


class Object6(str, Enum):
    """
    The object type, which is always "text_completion"
    """

    text_completion = 'text_completion'


class CreateCompletionResponse(Struct):
    """
    Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).

    """

    id: str
    """
    A unique identifier for the completion.
    """
    choices: List[Choice3]
    """
    The list of completion choices the model generated for the input prompt.
    """
    created: int
    """
    The Unix timestamp (in seconds) of when the completion was created.
    """
    model: str
    """
    The model used for completion.
    """
    object: Object6
    """
    The object type, which is always "text_completion"
    """
    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.

    Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.

    """
    usage: Optional[CompletionUsage] = None


Input = List[str]


Input1 = List[int]


Input2Item = List[int]


Input2 = List[Input2Item]


class Model3(str, Enum):
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """

    text_embedding_ada_002 = 'text-embedding-ada-002'
    text_embedding_3_small = 'text-embedding-3-small'
    text_embedding_3_large = 'text-embedding-3-large'


class EncodingFormat(str, Enum):
    """
    The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
    """

    float = 'float'
    base64 = 'base64'


class CreateEmbeddingRequest(Struct):
    input: Union[str, Input, Input1, Input2]
    """
    Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.

    """
    model: Union[str, Model3]
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """
    encoding_format: EncodingFormat = 'float'
    """
    The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
    """
    dimensions: Optional[int] = None
    """
    The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.

    """
    user: Optional[str] = None
    """
    A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

    """


class Object7(str, Enum):
    """
    The object type, which is always "list".
    """

    list = 'list'


class Usage1(Struct):
    """
    The usage information for the request.
    """

    prompt_tokens: int
    """
    The number of tokens used by the prompt.
    """
    total_tokens: int
    """
    The total number of tokens used by the request.
    """


class Purpose(str, Enum):
    """
    The intended purpose of the uploaded file.

    Use "assistants" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, "vision" for Assistants image file inputs, "batch" for [Batch API](/docs/guides/batch), and "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning).

    """

    assistants = 'assistants'
    batch = 'batch'
    fine_tune = 'fine-tune'
    vision = 'vision'


class CreateFileRequest(Struct):
    file: bytes
    """
    The File object (not file name) to be uploaded.

    """
    purpose: Purpose
    """
    The intended purpose of the uploaded file.

    Use "assistants" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, "vision" for Assistants image file inputs, "batch" for [Batch API](/docs/guides/batch), and "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning).

    """


class Model4(str, Enum):
    """
    The name of the model to fine-tune. You can select one of the
    [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).

    """

    babbage_002 = 'babbage-002'
    davinci_002 = 'davinci-002'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_4o_mini = 'gpt-4o-mini'


class BatchSize(str, Enum):
    """
    Number of examples in each batch. A larger batch size means that model parameters
    are updated less frequently, but with lower variance.

    """

    auto = 'auto'


BatchSize1 = int


class LearningRateMultiplier(str, Enum):
    """
    Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
    overfitting.

    """

    auto = 'auto'


LearningRateMultiplier1 = float


class NEpochs(str, Enum):
    """
    The number of epochs to train the model for. An epoch refers to one full cycle
    through the training dataset.

    """

    auto = 'auto'


NEpochs1 = int


class Hyperparameters(Struct):
    """
    The hyperparameters used for the fine-tuning job.
    """

    batch_size: Union[BatchSize, BatchSize1] = 'auto'
    """
    Number of examples in each batch. A larger batch size means that model parameters
    are updated less frequently, but with lower variance.

    """
    learning_rate_multiplier: Union[LearningRateMultiplier, LearningRateMultiplier1] = (
        'auto'
    )
    """
    Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
    overfitting.

    """
    n_epochs: Union[NEpochs, NEpochs1] = 'auto'
    """
    The number of epochs to train the model for. An epoch refers to one full cycle
    through the training dataset.

    """


class Type20(str, Enum):
    """
    The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.

    """

    wandb = 'wandb'


class Wandb(Struct):
    """
    The settings for your integration with Weights and Biases. This payload specifies the project that
    metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
    to your run, and set a default entity (team, username, etc) to be associated with your run.

    """

    project: str
    """
    The name of the project that the new run will be created under.

    """
    name: Optional[str] = None
    """
    A display name to set for the run. If not set, we will use the Job ID as the name.

    """
    entity: Optional[str] = None
    """
    The entity to use for the run. This allows you to set the team or username of the WandB user that you would
    like associated with the run. If not set, the default entity for the registered WandB API key is used.

    """
    tags: Optional[List[str]] = None
    """
    A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
    default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".

    """


class Integration(Struct):
    type: Type20
    """
    The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.

    """
    wandb: Wandb
    """
    The settings for your integration with Weights and Biases. This payload specifies the project that
    metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
    to your run, and set a default entity (team, username, etc) to be associated with your run.

    """


class CreateFineTuningJobRequest(Struct):
    model: Union[str, Model4]
    """
    The name of the model to fine-tune. You can select one of the
    [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).

    """
    training_file: str
    """
    The ID of an uploaded file that contains training data.

    See [upload file](/docs/api-reference/files/create) for how to upload a file.

    Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.

    The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) format.

    See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.

    """
    hyperparameters: Optional[Hyperparameters] = None
    """
    The hyperparameters used for the fine-tuning job.
    """
    suffix: Optional[str] = None
    """
    A string of up to 64 characters that will be added to your fine-tuned model name.

    For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.

    """
    validation_file: Optional[str] = None
    """
    The ID of an uploaded file that contains validation data.

    If you provide this file, the data is used to generate validation
    metrics periodically during fine-tuning. These metrics can be viewed in
    the fine-tuning results file.
    The same data should not be present in both train and validation files.

    Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.

    See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.

    """
    integrations: Optional[List[Integration]] = None
    """
    A list of integrations to enable for your fine-tuning job.
    """
    seed: Optional[int] = None
    """
    The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
    If a seed is not specified, one will be generated for you.

    """


class Model5(str, Enum):
    """
    The model to use for image generation. Only `dall-e-2` is supported at this time.
    """

    dall_e_2 = 'dall-e-2'


class Size(str, Enum):
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    """

    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'


class ResponseFormat(str, Enum):
    """
    The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    """

    url = 'url'
    b64_json = 'b64_json'


class CreateImageEditRequest(Struct):
    image: bytes
    """
    The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
    """
    prompt: str
    """
    A text description of the desired image(s). The maximum length is 1000 characters.
    """
    mask: Optional[bytes] = None
    """
    An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
    """
    model: Optional[Union[Optional[str], Model5]] = 'dall-e-2'
    """
    The model to use for image generation. Only `dall-e-2` is supported at this time.
    """
    n: Optional[int] = 1
    """
    The number of images to generate. Must be between 1 and 10.
    """
    size: Optional[Size] = '1024x1024'
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    """
    response_format: Optional[ResponseFormat] = 'url'
    """
    The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    """
    user: Optional[str] = None
    """
    A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

    """


class Model6(str, Enum):
    """
    The model to use for image generation.
    """

    dall_e_2 = 'dall-e-2'
    dall_e_3 = 'dall-e-3'


class Quality(str, Enum):
    """
    The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
    """

    standard = 'standard'
    hd = 'hd'


class Size1(str, Enum):
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
    """

    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'
    field_1792x1024 = '1792x1024'
    field_1024x1792 = '1024x1792'


class Style(str, Enum):
    """
    The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
    """

    vivid = 'vivid'
    natural = 'natural'


class CreateImageRequest(Struct):
    prompt: str
    """
    A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
    """
    model: Optional[Union[Optional[str], Model6]] = 'dall-e-2'
    """
    The model to use for image generation.
    """
    n: Optional[int] = 1
    """
    The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
    """
    quality: Quality = 'standard'
    """
    The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
    """
    response_format: Optional[ResponseFormat] = 'url'
    """
    The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    """
    size: Optional[Size1] = '1024x1024'
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
    """
    style: Optional[Style] = 'vivid'
    """
    The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
    """
    user: Optional[str] = None
    """
    A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

    """


class Model7(str, Enum):
    """
    The model to use for image generation. Only `dall-e-2` is supported at this time.
    """

    dall_e_2 = 'dall-e-2'


class Size2(str, Enum):
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    """

    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'


class CreateImageVariationRequest(Struct):
    image: bytes
    """
    The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
    """
    model: Optional[Union[Optional[str], Model7]] = 'dall-e-2'
    """
    The model to use for image generation. Only `dall-e-2` is supported at this time.
    """
    n: Optional[int] = 1
    """
    The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
    """
    response_format: Optional[ResponseFormat] = 'url'
    """
    The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    """
    size: Optional[Size2] = '1024x1024'
    """
    The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    """
    user: Optional[str] = None
    """
    A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

    """


class Role7(str, Enum):
    """
    The role of the entity that is creating the message. Allowed values include:
    - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
    - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.

    """

    user = 'user'
    assistant = 'assistant'


class Attachment(Struct):
    file_id: Optional[str] = None
    """
    The ID of the file to attach to the message.
    """
    tools: Optional[
        List[Union[AssistantToolsCode, AssistantToolsFileSearchTypeOnly]]
    ] = None
    """
    The tools to add this file to.
    """


class Type21(str, Enum):
    """
    Always `image_url`.
    """

    image_url = 'image_url'


class ImageUrl1(Struct):
    """
    Contains either an image URL or a data URL for a base64 encoded image.
    """

    url: str
    """
    Either a URL of the image or the base64 encoded image data.
    """


class Input3(Struct):
    """
    An object describing an image to classify.
    """

    type: Type21
    """
    Always `image_url`.
    """
    image_url: ImageUrl1
    """
    Contains either an image URL or a data URL for a base64 encoded image.
    """


class Type22(str, Enum):
    """
    Always `text`.
    """

    text = 'text'


class Input4(Struct):
    """
    An object describing text to classify.
    """

    type: Type22
    """
    Always `text`.
    """
    text: str
    """
    A string of text to classify.
    """


class Model8(str, Enum):
    """
    The content moderation model you would like to use. Learn more in
    [the moderation guide](/docs/guides/moderation), and learn about
    available models [here](/docs/models#moderation).

    """

    omni_moderation_latest = 'omni-moderation-latest'
    omni_moderation_2024_09_26 = 'omni-moderation-2024-09-26'
    text_moderation_latest = 'text-moderation-latest'
    text_moderation_stable = 'text-moderation-stable'


class CreateModerationRequest(Struct):
    input: Union[str, List[str], List[Union[Input3, Input4]]]
    """
    Input (or inputs) to classify. Can be a single string, an array of strings, or
    an array of multi-modal input objects similar to other models.

    """
    model: Union[str, Model8] = 'omni-moderation-latest'
    """
    The content moderation model you would like to use. Learn more in
    [the moderation guide](/docs/guides/moderation), and learn about
    available models [here](/docs/models#moderation).

    """


class Categories(Struct):
    """
    A list of the categories, and whether they are flagged or not.
    """

    hate: bool
    """
    Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
    """
    hate_threatening: bool = field(name='hate/threatening')
    """
    Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
    """
    harassment: bool
    """
    Content that expresses, incites, or promotes harassing language towards any target.
    """
    harassment_threatening: bool = field(name='harassment/threatening')
    """
    Harassment content that also includes violence or serious harm towards any target.
    """
    illicit: bool
    """
    Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.
    """
    illicit_violent: bool = field(name='illicit/violent')
    """
    Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
    """
    self_harm: bool = field(name='self-harm')
    """
    Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
    """
    self_harm_intent: bool = field(name='self-harm/intent')
    """
    Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
    """
    self_harm_instructions: bool = field(name='self-harm/instructions')
    """
    Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
    """
    sexual: bool
    """
    Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
    """
    sexual_minors: bool = field(name='sexual/minors')
    """
    Sexual content that includes an individual who is under 18 years old.
    """
    violence: bool
    """
    Content that depicts death, violence, or physical injury.
    """
    violence_graphic: bool = field(name='violence/graphic')
    """
    Content that depicts death, violence, or physical injury in graphic detail.
    """


class CategoryScores(Struct):
    """
    A list of the categories along with their scores as predicted by model.
    """

    hate: float
    """
    The score for the category 'hate'.
    """
    hate_threatening: float = field(name='hate/threatening')
    """
    The score for the category 'hate/threatening'.
    """
    harassment: float
    """
    The score for the category 'harassment'.
    """
    harassment_threatening: float = field(name='harassment/threatening')
    """
    The score for the category 'harassment/threatening'.
    """
    illicit: float
    """
    The score for the category 'illicit'.
    """
    illicit_violent: float = field(name='illicit/violent')
    """
    The score for the category 'illicit/violent'.
    """
    self_harm: float = field(name='self-harm')
    """
    The score for the category 'self-harm'.
    """
    self_harm_intent: float = field(name='self-harm/intent')
    """
    The score for the category 'self-harm/intent'.
    """
    self_harm_instructions: float = field(name='self-harm/instructions')
    """
    The score for the category 'self-harm/instructions'.
    """
    sexual: float
    """
    The score for the category 'sexual'.
    """
    sexual_minors: float = field(name='sexual/minors')
    """
    The score for the category 'sexual/minors'.
    """
    violence: float
    """
    The score for the category 'violence'.
    """
    violence_graphic: float = field(name='violence/graphic')
    """
    The score for the category 'violence/graphic'.
    """


class HateEnum(str, Enum):
    text = 'text'


class HateThreateningEnum(str, Enum):
    text = 'text'


class HarassmentEnum(str, Enum):
    text = 'text'


class HarassmentThreateningEnum(str, Enum):
    text = 'text'


class IllicitEnum(str, Enum):
    text = 'text'


class IllicitViolentEnum(str, Enum):
    text = 'text'


class SelfHarmEnum(str, Enum):
    text = 'text'
    image = 'image'


class SelfHarmIntentEnum(str, Enum):
    text = 'text'
    image = 'image'


class SelfHarmInstruction(str, Enum):
    text = 'text'
    image = 'image'


class SexualEnum(str, Enum):
    text = 'text'
    image = 'image'


class SexualMinor(str, Enum):
    text = 'text'


class ViolenceEnum(str, Enum):
    text = 'text'
    image = 'image'


class ViolenceGraphicEnum(str, Enum):
    text = 'text'
    image = 'image'


class CategoryAppliedInputTypes(Struct):
    """
    A list of the categories along with the input type(s) that the score applies to.
    """

    hate: List[HateEnum]
    """
    The applied input type(s) for the category 'hate'.
    """
    hate_threatening: List[HateThreateningEnum] = field(name='hate/threatening')
    """
    The applied input type(s) for the category 'hate/threatening'.
    """
    harassment: List[HarassmentEnum]
    """
    The applied input type(s) for the category 'harassment'.
    """
    harassment_threatening: List[HarassmentThreateningEnum] = field(
        name='harassment/threatening'
    )
    """
    The applied input type(s) for the category 'harassment/threatening'.
    """
    illicit: List[IllicitEnum]
    """
    The applied input type(s) for the category 'illicit'.
    """
    illicit_violent: List[IllicitViolentEnum] = field(name='illicit/violent')
    """
    The applied input type(s) for the category 'illicit/violent'.
    """
    self_harm: List[SelfHarmEnum] = field(name='self-harm')
    """
    The applied input type(s) for the category 'self-harm'.
    """
    self_harm_intent: List[SelfHarmIntentEnum] = field(name='self-harm/intent')
    """
    The applied input type(s) for the category 'self-harm/intent'.
    """
    self_harm_instructions: List[SelfHarmInstruction] = field(
        name='self-harm/instructions'
    )
    """
    The applied input type(s) for the category 'self-harm/instructions'.
    """
    sexual: List[SexualEnum]
    """
    The applied input type(s) for the category 'sexual'.
    """
    sexual_minors: List[SexualMinor] = field(name='sexual/minors')
    """
    The applied input type(s) for the category 'sexual/minors'.
    """
    violence: List[ViolenceEnum]
    """
    The applied input type(s) for the category 'violence'.
    """
    violence_graphic: List[ViolenceGraphicEnum] = field(name='violence/graphic')
    """
    The applied input type(s) for the category 'violence/graphic'.
    """


class Result(Struct):
    flagged: bool
    """
    Whether any of the below categories are flagged.
    """
    categories: Categories
    """
    A list of the categories, and whether they are flagged or not.
    """
    category_scores: CategoryScores
    """
    A list of the categories along with their scores as predicted by model.
    """
    category_applied_input_types: CategoryAppliedInputTypes
    """
    A list of the categories along with the input type(s) that the score applies to.
    """


class CreateModerationResponse(Struct):
    """
    Represents if a given text input is potentially harmful.
    """

    id: str
    """
    The unique identifier for the moderation request.
    """
    model: str
    """
    The model used to generate the moderation results.
    """
    results: List[Result]
    """
    A list of moderation objects.
    """


class Model9(str, Enum):
    """
    The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
    """

    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class Model10(str, Enum):
    """
    One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`

    """

    tts_1 = 'tts-1'
    tts_1_hd = 'tts-1-hd'


class Voice1(str, Enum):
    """
    The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
    """

    alloy = 'alloy'
    echo = 'echo'
    fable = 'fable'
    onyx = 'onyx'
    nova = 'nova'
    shimmer = 'shimmer'


class ResponseFormat3(str, Enum):
    """
    The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
    """

    mp3 = 'mp3'
    opus = 'opus'
    aac = 'aac'
    flac = 'flac'
    wav = 'wav'
    pcm = 'pcm'


class CreateSpeechRequest(Struct):
    model: Union[str, Model10]
    """
    One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`

    """
    input: str
    """
    The text to generate audio for. The maximum length is 4096 characters.
    """
    voice: Voice1
    """
    The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
    """
    response_format: ResponseFormat3 = 'mp3'
    """
    The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
    """
    speed: float = 1
    """
    The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
    """


class Model11(str, Enum):
    """
    The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
    """

    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class FileSearch4(Struct):
    vector_store_ids: Optional[List[str]] = None
    """
    The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.

    """


class ToolResources2(Struct):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: Optional[CodeInterpreter1] = None
    file_search: Optional[FileSearch4] = None


class Type23(str, Enum):
    """
    Always `auto`.
    """

    auto = 'auto'


class ChunkingStrategy4(Struct):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """

    type: Type23
    """
    Always `auto`.
    """


class Type24(str, Enum):
    """
    Always `static`.
    """

    static = 'static'


class ChunkingStrategy5(Struct):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """

    type: Type24
    """
    Always `static`.
    """
    static: Static


class VectorStore2(Struct):
    file_ids: Optional[List[str]] = None
    """
    A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.

    """
    chunking_strategy: Optional[Union[ChunkingStrategy4, ChunkingStrategy5]] = None
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class FileSearch5(Struct):
    vector_store_ids: List[str]
    """
    The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.

    """
    vector_stores: Optional[List[VectorStore2]] = None
    """
    A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.

    """


class Type25(str, Enum):
    """
    Always `auto`.
    """

    auto = 'auto'


class ChunkingStrategy6(Struct):
    """
    The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    """

    type: Type25
    """
    Always `auto`.
    """


class Type26(str, Enum):
    """
    Always `static`.
    """

    static = 'static'


class ChunkingStrategy7(Struct):
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """

    type: Type26
    """
    Always `static`.
    """
    static: Static


class VectorStore3(Struct):
    file_ids: Optional[List[str]] = None
    """
    A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.

    """
    chunking_strategy: Optional[Union[ChunkingStrategy6, ChunkingStrategy7]] = None
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class FileSearch6(Struct):
    vector_stores: List[VectorStore3]
    """
    A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.

    """
    vector_store_ids: Optional[List[str]] = None
    """
    The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.

    """


class ToolResources3(Struct):
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: Optional[CodeInterpreter1] = None
    file_search: Optional[Union[FileSearch5, FileSearch6]] = None


class Model12(str, Enum):
    """
    ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.

    """

    whisper_1 = 'whisper-1'


class TimestampGranularity(str, Enum):
    word = 'word'
    segment = 'segment'


class CreateTranscriptionRequest(Struct):
    file: bytes
    """
    The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.

    """
    model: Union[str, Model12]
    """
    ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.

    """
    language: Optional[str] = None
    """
    The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.

    """
    prompt: Optional[str] = None
    """
    An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.

    """
    response_format: Optional[AudioResponseFormat] = 'json'
    temperature: float = 0
    """
    The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.

    """
    timestamp_granularities__: List[TimestampGranularity] = field(
        name='timestamp_granularities[]', default=['segment']
    )
    """
    The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.

    """


class CreateTranscriptionResponseJson(Struct):
    """
    Represents a transcription response returned by model, based on the provided input.
    """

    text: str
    """
    The transcribed text.
    """


class CreateTranslationRequest(Struct):
    file: bytes
    """
    The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.

    """
    model: Union[str, Model12]
    """
    ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.

    """
    prompt: Optional[str] = None
    """
    An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.

    """
    response_format: Optional[AudioResponseFormat] = 'json'
    temperature: float = 0
    """
    The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.

    """


class CreateTranslationResponseJson(Struct):
    text: str


class Purpose1(str, Enum):
    """
    The intended purpose of the uploaded file.

    See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).

    """

    assistants = 'assistants'
    batch = 'batch'
    fine_tune = 'fine-tune'
    vision = 'vision'


class CreateUploadRequest(Struct):
    filename: str
    """
    The name of the file to upload.

    """
    purpose: Purpose1
    """
    The intended purpose of the uploaded file.

    See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).

    """
    bytes: int
    """
    The number of bytes in the file you are uploading.

    """
    mime_type: str
    """
    The MIME type of the file.

    This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.

    """


class DefaultProjectErrorResponse(Struct):
    code: int
    message: str


class Object8(str, Enum):
    assistant_deleted = 'assistant.deleted'


class DeleteAssistantResponse(Struct):
    id: str
    deleted: bool
    object: Object8


class Object9(str, Enum):
    file = 'file'


class DeleteFileResponse(Struct):
    id: str
    object: Object9
    deleted: bool


class Object10(str, Enum):
    thread_message_deleted = 'thread.message.deleted'


class DeleteMessageResponse(Struct):
    id: str
    deleted: bool
    object: Object10


class DeleteModelResponse(Struct):
    id: str
    deleted: bool
    object: str


class Object11(str, Enum):
    thread_deleted = 'thread.deleted'


class DeleteThreadResponse(Struct):
    id: str
    deleted: bool
    object: Object11


class Object12(str, Enum):
    vector_store_file_deleted = 'vector_store.file.deleted'


class DeleteVectorStoreFileResponse(Struct):
    id: str
    deleted: bool
    object: Object12


class Object13(str, Enum):
    vector_store_deleted = 'vector_store.deleted'


class DeleteVectorStoreResponse(Struct):
    id: str
    deleted: bool
    object: Object13


class Event(str, Enum):
    done = 'done'


class Data5(str, Enum):
    field_DONE_ = '[DONE]'


class DoneEvent(Struct):
    """
    Occurs when a stream ends.
    """

    event: Event
    data: Data5


class Object14(str, Enum):
    """
    The object type, which is always "embedding".
    """

    embedding = 'embedding'


class Embedding(Struct):
    """
    Represents an embedding vector returned by embedding endpoint.

    """

    index: int
    """
    The index of the embedding in the list of embeddings.
    """
    embedding: List[float]
    """
    The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).

    """
    object: Object14
    """
    The object type, which is always "embedding".
    """


class Error1(Struct):
    code: Optional[str] = None
    message: str
    param: Optional[str] = None
    type: str


class Event1(str, Enum):
    error = 'error'


class ErrorEvent(Struct):
    """
    Occurs when an [error](/docs/guides/error-codes#api-errors) occurs. This can happen due to an internal server error or a timeout.
    """

    event: Event1
    data: Error1


class ErrorResponse(Struct):
    error: Error1


class Ranker(str, Enum):
    """
    The ranker to use for the file search. If not specified will use the `auto` ranker.
    """

    auto = 'auto'
    default_2024_08_21 = 'default_2024_08_21'


class FileSearchRankingOptions(Struct):
    """
    The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.

    See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.

    """

    score_threshold: float
    """
    The score threshold for the file search. All values must be a floating point number between 0 and 1.
    """
    ranker: Optional[Ranker] = None
    """
    The ranker to use for the file search. If not specified will use the `auto` ranker.
    """


class Weight(int, Enum):
    """
    Controls whether the assistant message is trained against (0 or 1)
    """

    integer_0 = 0
    integer_1 = 1


class Type27(str, Enum):
    """
    The type of the integration being enabled for the fine-tuning job
    """

    wandb = 'wandb'


class FineTuningIntegration(Struct):
    type: Type27
    """
    The type of the integration being enabled for the fine-tuning job
    """
    wandb: Wandb
    """
    The settings for your integration with Weights and Biases. This payload specifies the project that
    metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
    to your run, and set a default entity (team, username, etc) to be associated with your run.

    """


class Error2(Struct):
    """
    For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
    """

    code: str
    """
    A machine-readable error code.
    """
    message: str
    """
    A human-readable error message.
    """
    param: Optional[str] = None
    """
    The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
    """


class NEpochs2(str, Enum):
    """
    The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
    "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
    """

    auto = 'auto'


NEpochs3 = int


class Hyperparameters1(Struct):
    """
    The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
    """

    n_epochs: Union[NEpochs2, NEpochs3]
    """
    The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
    "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
    """


class Object15(str, Enum):
    """
    The object type, which is always "fine_tuning.job".
    """

    fine_tuning_job = 'fine_tuning.job'


class Status1(str, Enum):
    """
    The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
    """

    validating_files = 'validating_files'
    queued = 'queued'
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    cancelled = 'cancelled'


class FineTuningJob(Struct):
    """
    The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.

    """

    id: str
    """
    The object identifier, which can be referenced in the API endpoints.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the fine-tuning job was created.
    """
    error: Optional[Error2] = None
    """
    For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
    """
    fine_tuned_model: Optional[str] = None
    """
    The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
    """
    finished_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
    """
    hyperparameters: Hyperparameters1
    """
    The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
    """
    model: str
    """
    The base model that is being fine-tuned.
    """
    object: Object15
    """
    The object type, which is always "fine_tuning.job".
    """
    organization_id: str
    """
    The organization that owns the fine-tuning job.
    """
    result_files: List[str]
    """
    The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
    """
    status: Status1
    """
    The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
    """
    trained_tokens: Optional[int] = None
    """
    The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
    """
    training_file: str
    """
    The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
    """
    validation_file: Optional[str] = None
    """
    The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
    """
    seed: int
    """
    The seed used for the fine-tuning job.
    """
    integrations: Optional[List[FineTuningIntegration]] = None
    """
    A list of integrations to enable for this fine-tuning job.
    """
    estimated_finish: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
    """


class Metrics(Struct):
    """
    Metrics at the step number during the fine-tuning job.
    """

    step: Optional[float] = None
    train_loss: Optional[float] = None
    train_mean_token_accuracy: Optional[float] = None
    valid_loss: Optional[float] = None
    valid_mean_token_accuracy: Optional[float] = None
    full_valid_loss: Optional[float] = None
    full_valid_mean_token_accuracy: Optional[float] = None


class Object16(str, Enum):
    """
    The object type, which is always "fine_tuning.job.checkpoint".
    """

    fine_tuning_job_checkpoint = 'fine_tuning.job.checkpoint'


class FineTuningJobCheckpoint(Struct):
    """
    The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.

    """

    id: str
    """
    The checkpoint identifier, which can be referenced in the API endpoints.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the checkpoint was created.
    """
    fine_tuned_model_checkpoint: str
    """
    The name of the fine-tuned checkpoint model that is created.
    """
    step_number: int
    """
    The step number that the checkpoint was created at.
    """
    metrics: Metrics
    """
    Metrics at the step number during the fine-tuning job.
    """
    fine_tuning_job_id: str
    """
    The name of the fine-tuning job that this checkpoint was created from.
    """
    object: Object16
    """
    The object type, which is always "fine_tuning.job.checkpoint".
    """


class Level(str, Enum):
    info = 'info'
    warn = 'warn'
    error = 'error'


class Object17(str, Enum):
    fine_tuning_job_event = 'fine_tuning.job.event'


class FineTuningJobEvent(Struct):
    """
    Fine-tuning job event object
    """

    id: str
    created_at: int
    level: Level
    message: str
    object: Object17


class FinetuneCompletionRequestInput(Struct):
    """
    The per-line training example of a fine-tuning input file for completions models
    """

    prompt: Optional[str] = None
    """
    The input prompt for this training example.
    """
    completion: Optional[str] = None
    """
    The desired completion for this training example.
    """


class FunctionParameters(Struct):
    """
    The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.

    Omitting `parameters` defines a function with an empty parameter list.
    """


class Image(Struct):
    """
    Represents the url or the content of an image generated by the OpenAI API.
    """

    b64_json: Optional[str] = None
    """
    The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
    """
    url: Optional[str] = None
    """
    The URL of the generated image, if `response_format` is `url` (default).
    """
    revised_prompt: Optional[str] = None
    """
    The prompt that was used to generate the image, if there was any revision to the prompt.
    """


class ImagesResponse(Struct):
    created: int
    data: List[Image]


class Object18(str, Enum):
    """
    The object type, which is always `organization.invite`
    """

    organization_invite = 'organization.invite'


class Role8(str, Enum):
    """
    `owner` or `reader`
    """

    owner = 'owner'
    reader = 'reader'


class Status2(str, Enum):
    """
    `accepted`,`expired`, or `pending`
    """

    accepted = 'accepted'
    expired = 'expired'
    pending = 'pending'


class Invite(Struct):
    """
    Represents an individual `invite` to the organization.
    """

    object: Object18
    """
    The object type, which is always `organization.invite`
    """
    id: str
    """
    The identifier, which can be referenced in API endpoints
    """
    email: str
    """
    The email address of the individual to whom the invite was sent
    """
    role: Role8
    """
    `owner` or `reader`
    """
    status: Status2
    """
    `accepted`,`expired`, or `pending`
    """
    invited_at: int
    """
    The Unix timestamp (in seconds) of when the invite was sent.
    """
    expires_at: int
    """
    The Unix timestamp (in seconds) of when the invite expires.
    """
    accepted_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) of when the invite was accepted.
    """


class Object19(str, Enum):
    """
    The object type, which is always `organization.invite.deleted`
    """

    organization_invite_deleted = 'organization.invite.deleted'


class InviteDeleteResponse(Struct):
    object: Object19
    """
    The object type, which is always `organization.invite.deleted`
    """
    id: str
    deleted: bool


class Object20(str, Enum):
    """
    The object type, which is always `list`
    """

    list = 'list'


class InviteListResponse(Struct):
    object: Object20
    """
    The object type, which is always `list`
    """
    data: List[Invite]
    first_id: Optional[str] = None
    """
    The first `invite_id` in the retrieved `list`
    """
    last_id: Optional[str] = None
    """
    The last `invite_id` in the retrieved `list`
    """
    has_more: Optional[bool] = None
    """
    The `has_more` property is used for pagination to indicate there are additional results.
    """


class Role9(str, Enum):
    """
    `owner` or `reader`
    """

    reader = 'reader'
    owner = 'owner'


class InviteRequest(Struct):
    email: str
    """
    Send an email to this address
    """
    role: Role9
    """
    `owner` or `reader`
    """


class Object21(str, Enum):
    list = 'list'


class ListBatchesResponse(Struct):
    data: List[Batch]
    has_more: bool
    object: Object21
    first_id: Optional[str] = None
    last_id: Optional[str] = None


class ListFineTuningJobCheckpointsResponse(Struct):
    data: List[FineTuningJobCheckpoint]
    object: Object21
    has_more: bool
    first_id: Optional[str] = None
    last_id: Optional[str] = None


class ListFineTuningJobEventsResponse(Struct):
    data: List[FineTuningJobEvent]
    object: Object21


class ListPaginatedFineTuningJobsResponse(Struct):
    data: List[FineTuningJob]
    has_more: bool
    object: Object21


class Type28(str, Enum):
    """
    Always `image_file`.
    """

    image_file = 'image_file'


class Detail1(str, Enum):
    """
    Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageFile(Struct):
    file_id: str
    """
    The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
    """
    detail: Detail1 = 'auto'
    """
    Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """


class MessageContentImageFileObject(Struct):
    """
    References an image [File](/docs/api-reference/files) in the content of a message.
    """

    type: Type28
    """
    Always `image_file`.
    """
    image_file: ImageFile


class Type29(str, Enum):
    """
    The type of the content part.
    """

    image_url = 'image_url'


class Detail2(str, Enum):
    """
    Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageUrl2(Struct):
    url: str
    """
    The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
    """
    detail: Detail2 = 'auto'
    """
    Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
    """


class MessageContentImageUrlObject(Struct):
    """
    References an image URL in the content of a message.
    """

    type: Type29
    """
    The type of the content part.
    """
    image_url: ImageUrl2


class Type30(str, Enum):
    """
    Always `refusal`.
    """

    refusal = 'refusal'


class MessageContentRefusalObject(Struct):
    """
    The refusal content generated by the assistant.
    """

    type: Type30
    """
    Always `refusal`.
    """
    refusal: str


class Type31(str, Enum):
    """
    Always `file_citation`.
    """

    file_citation = 'file_citation'


class FileCitation(Struct):
    file_id: str
    """
    The ID of the specific File the citation is from.
    """


class MessageContentTextAnnotationsFileCitationObject(Struct):
    """
    A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
    """

    type: Type31
    """
    Always `file_citation`.
    """
    text: str
    """
    The text in the message content that needs to be replaced.
    """
    file_citation: FileCitation
    start_index: int
    end_index: int


class Type32(str, Enum):
    """
    Always `file_path`.
    """

    file_path = 'file_path'


class FilePath(Struct):
    file_id: str
    """
    The ID of the file that was generated.
    """


class MessageContentTextAnnotationsFilePathObject(Struct):
    """
    A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    """

    type: Type32
    """
    Always `file_path`.
    """
    text: str
    """
    The text in the message content that needs to be replaced.
    """
    file_path: FilePath
    start_index: int
    end_index: int


class Type33(str, Enum):
    """
    Always `text`.
    """

    text = 'text'


class Text(Struct):
    value: str
    """
    The data that makes up the text.
    """
    annotations: List[
        Union[
            MessageContentTextAnnotationsFileCitationObject,
            MessageContentTextAnnotationsFilePathObject,
        ]
    ]


class MessageContentTextObject(Struct):
    """
    The text content that is part of a message.
    """

    type: Type33
    """
    Always `text`.
    """
    text: Text


class Type34(str, Enum):
    """
    Always `image_file`.
    """

    image_file = 'image_file'


class Detail3(str, Enum):
    """
    Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageFile1(Struct):
    file_id: Optional[str] = None
    """
    The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
    """
    detail: Detail3 = 'auto'
    """
    Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """


class MessageDeltaContentImageFileObject(Struct):
    """
    References an image [File](/docs/api-reference/files) in the content of a message.
    """

    index: int
    """
    The index of the content part in the message.
    """
    type: Type34
    """
    Always `image_file`.
    """
    image_file: Optional[ImageFile1] = None


class Type35(str, Enum):
    """
    Always `image_url`.
    """

    image_url = 'image_url'


class Detail4(str, Enum):
    """
    Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """

    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageUrl3(Struct):
    url: Optional[str] = None
    """
    The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
    """
    detail: Detail4 = 'auto'
    """
    Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """


class MessageDeltaContentImageUrlObject(Struct):
    """
    References an image URL in the content of a message.
    """

    index: int
    """
    The index of the content part in the message.
    """
    type: Type35
    """
    Always `image_url`.
    """
    image_url: Optional[ImageUrl3] = None


class Type36(str, Enum):
    """
    Always `refusal`.
    """

    refusal = 'refusal'


class MessageDeltaContentRefusalObject(Struct):
    """
    The refusal content that is part of a message.
    """

    index: int
    """
    The index of the refusal part in the message.
    """
    type: Type36
    """
    Always `refusal`.
    """
    refusal: Optional[str] = None


class Type37(str, Enum):
    """
    Always `file_citation`.
    """

    file_citation = 'file_citation'


class FileCitation1(Struct):
    file_id: Optional[str] = None
    """
    The ID of the specific File the citation is from.
    """
    quote: Optional[str] = None
    """
    The specific quote in the file.
    """


class MessageDeltaContentTextAnnotationsFileCitationObject(Struct):
    """
    A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
    """

    index: int
    """
    The index of the annotation in the text content part.
    """
    type: Type37
    """
    Always `file_citation`.
    """
    text: Optional[str] = None
    """
    The text in the message content that needs to be replaced.
    """
    file_citation: Optional[FileCitation1] = None
    start_index: Optional[int] = None
    end_index: Optional[int] = None


class Type38(str, Enum):
    """
    Always `file_path`.
    """

    file_path = 'file_path'


class FilePath1(Struct):
    file_id: Optional[str] = None
    """
    The ID of the file that was generated.
    """


class MessageDeltaContentTextAnnotationsFilePathObject(Struct):
    """
    A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    """

    index: int
    """
    The index of the annotation in the text content part.
    """
    type: Type38
    """
    Always `file_path`.
    """
    text: Optional[str] = None
    """
    The text in the message content that needs to be replaced.
    """
    file_path: Optional[FilePath1] = None
    start_index: Optional[int] = None
    end_index: Optional[int] = None


class Type39(str, Enum):
    """
    Always `text`.
    """

    text = 'text'


class Text1(Struct):
    value: Optional[str] = None
    """
    The data that makes up the text.
    """
    annotations: Optional[
        List[
            Union[
                MessageDeltaContentTextAnnotationsFileCitationObject,
                MessageDeltaContentTextAnnotationsFilePathObject,
            ]
        ]
    ] = None


class MessageDeltaContentTextObject(Struct):
    """
    The text content that is part of a message.
    """

    index: int
    """
    The index of the content part in the message.
    """
    type: Type39
    """
    Always `text`.
    """
    text: Optional[Text1] = None


class Object27(str, Enum):
    """
    The object type, which is always `thread.message.delta`.
    """

    thread_message_delta = 'thread.message.delta'


class Role10(str, Enum):
    """
    The entity that produced the message. One of `user` or `assistant`.
    """

    user = 'user'
    assistant = 'assistant'


class Delta(Struct):
    """
    The delta containing the fields that have changed on the Message.
    """

    role: Optional[Role10] = None
    """
    The entity that produced the message. One of `user` or `assistant`.
    """
    content: Optional[
        List[
            Union[
                MessageDeltaContentImageFileObject,
                MessageDeltaContentTextObject,
                MessageDeltaContentRefusalObject,
                MessageDeltaContentImageUrlObject,
            ]
        ]
    ] = None
    """
    The content of the message in array of text and/or images.
    """


class MessageDeltaObject(Struct):
    """
    Represents a message delta i.e. any changed fields on a message during streaming.

    """

    id: str
    """
    The identifier of the message, which can be referenced in API endpoints.
    """
    object: Object27
    """
    The object type, which is always `thread.message.delta`.
    """
    delta: Delta
    """
    The delta containing the fields that have changed on the Message.
    """


class Object28(str, Enum):
    """
    The object type, which is always `thread.message`.
    """

    thread_message = 'thread.message'


class Status3(str, Enum):
    """
    The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    """

    in_progress = 'in_progress'
    incomplete = 'incomplete'
    completed = 'completed'


class Reason(str, Enum):
    """
    The reason the message is incomplete.
    """

    content_filter = 'content_filter'
    max_tokens = 'max_tokens'
    run_cancelled = 'run_cancelled'
    run_expired = 'run_expired'
    run_failed = 'run_failed'


class IncompleteDetails(Struct):
    """
    On an incomplete message, details about why the message is incomplete.
    """

    reason: Reason
    """
    The reason the message is incomplete.
    """


class MessageObject(Struct):
    """
    Represents a message within a [thread](/docs/api-reference/threads).
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    object: Object28
    """
    The object type, which is always `thread.message`.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the message was created.
    """
    thread_id: str
    """
    The [thread](/docs/api-reference/threads) ID that this message belongs to.
    """
    status: Status3
    """
    The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
    """
    incomplete_details: Optional[IncompleteDetails] = None
    """
    On an incomplete message, details about why the message is incomplete.
    """
    completed_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the message was completed.
    """
    incomplete_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the message was marked as incomplete.
    """
    role: Role10
    """
    The entity that produced the message. One of `user` or `assistant`.
    """
    content: List[
        Union[
            MessageContentImageFileObject,
            MessageContentImageUrlObject,
            MessageContentTextObject,
            MessageContentRefusalObject,
        ]
    ]
    """
    The content of the message in array of text and/or images.
    """
    assistant_id: Optional[str] = None
    """
    If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    """
    run_id: Optional[str] = None
    """
    The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
    """
    attachments: Optional[List[Attachment]] = None
    """
    A list of files attached to the message, and the tools they were added to.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class MessageRequestContentTextObject(Struct):
    """
    The text content that is part of a message.
    """

    type: Type39
    """
    Always `text`.
    """
    text: str
    """
    Text content to be sent to the model
    """


class Event2(str, Enum):
    thread_message_created = 'thread.message.created'


class MessageStreamEvent1(Struct):
    """
    Occurs when a [message](/docs/api-reference/messages/object) is created.
    """

    event: Event2
    data: MessageObject


class Event3(str, Enum):
    thread_message_in_progress = 'thread.message.in_progress'


class MessageStreamEvent2(Struct):
    """
    Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
    """

    event: Event3
    data: MessageObject


class Event4(str, Enum):
    thread_message_delta = 'thread.message.delta'


class MessageStreamEvent3(Struct):
    """
    Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
    """

    event: Event4
    data: MessageDeltaObject


class Event5(str, Enum):
    thread_message_completed = 'thread.message.completed'


class MessageStreamEvent4(Struct):
    """
    Occurs when a [message](/docs/api-reference/messages/object) is completed.
    """

    event: Event5
    data: MessageObject


class Event6(str, Enum):
    thread_message_incomplete = 'thread.message.incomplete'


class MessageStreamEvent5(Struct):
    """
    Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
    """

    event: Event6
    data: MessageObject


MessageStreamEvent = Union[
    MessageStreamEvent1,
    MessageStreamEvent2,
    MessageStreamEvent3,
    MessageStreamEvent4,
    MessageStreamEvent5,
]


class Object29(str, Enum):
    """
    The object type, which is always "model".
    """

    model = 'model'


class ModelModel(Struct):
    """
    Describes an OpenAI model offering that can be used with the API.
    """

    id: str
    """
    The model identifier, which can be referenced in the API endpoints.
    """
    created: int
    """
    The Unix timestamp (in seconds) when the model was created.
    """
    object: Object29
    """
    The object type, which is always "model".
    """
    owned_by: str
    """
    The organization that owns the model.
    """


class CodeInterpreter4(Struct):
    file_ids: List[str] = []
    """
    Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.

    """


class FileSearch7(Struct):
    vector_store_ids: Optional[List[str]] = None
    """
    Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.

    """


class ToolResources4(Struct):
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: Optional[CodeInterpreter4] = None
    file_search: Optional[FileSearch7] = None


class ModifyMessageRequest(Struct):
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class ModifyRunRequest(Struct):
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class CodeInterpreter5(Struct):
    file_ids: List[str] = []
    """
    A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.

    """


class FileSearch8(Struct):
    vector_store_ids: Optional[List[str]] = None
    """
    The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.

    """


class ToolResources5(Struct):
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: Optional[CodeInterpreter5] = None
    file_search: Optional[FileSearch8] = None


class ModifyThreadRequest(Struct):
    tool_resources: Optional[ToolResources5] = None
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class Object30(str, Enum):
    """
    The object type, which is always `file`.
    """

    file = 'file'


class Purpose2(str, Enum):
    """
    The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
    """

    assistants = 'assistants'
    assistants_output = 'assistants_output'
    batch = 'batch'
    batch_output = 'batch_output'
    fine_tune = 'fine-tune'
    fine_tune_results = 'fine-tune-results'
    vision = 'vision'


class Status4(str, Enum):
    """
    Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
    """

    uploaded = 'uploaded'
    processed = 'processed'
    error = 'error'


class OpenAIFile(Struct):
    """
    The `File` object represents a document that has been uploaded to OpenAI.
    """

    id: str
    """
    The file identifier, which can be referenced in the API endpoints.
    """
    bytes: int
    """
    The size of the file, in bytes.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the file was created.
    """
    filename: str
    """
    The name of the file.
    """
    object: Object30
    """
    The object type, which is always `file`.
    """
    purpose: Purpose2
    """
    The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
    """
    status: Status4
    """
    Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
    """
    status_details: Optional[str] = None
    """
    Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
    """


class Type41(str, Enum):
    """
    Always `other`.
    """

    other = 'other'


class OtherChunkingStrategyResponseParam(Struct):
    """
    This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
    """

    type: Type41
    """
    Always `other`.
    """


ParallelToolCalls = bool


class Type42(str, Enum):
    """
    The type of the predicted content you want to provide. This type is
    currently always `content`.

    """

    content = 'content'


Content5 = List[ChatCompletionRequestMessageContentPartText]


class PredictionContent(Struct):
    """
    Static predicted output content, such as the content of a text file that is
    being regenerated.

    """

    type: Type42
    """
    The type of the predicted content you want to provide. This type is
    currently always `content`.

    """
    content: Union[str, Content5]
    """
    The content that should be matched when generating a model response.
    If generated tokens would match this content, the entire model response
    can be returned much more quickly.

    """


class Object31(str, Enum):
    """
    The object type, which is always `organization.project`
    """

    organization_project = 'organization.project'


class Status5(str, Enum):
    """
    `active` or `archived`
    """

    active = 'active'
    archived = 'archived'


class Project1(Struct):
    """
    Represents an individual project.
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints
    """
    object: Object31
    """
    The object type, which is always `organization.project`
    """
    name: str
    """
    The name of the project. This appears in reporting.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) of when the project was created.
    """
    status: Status5
    """
    `active` or `archived`
    """
    archived_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) of when the project was archived or `null`.
    """


class Object32(str, Enum):
    """
    The object type, which is always `organization.project.api_key`
    """

    organization_project_api_key = 'organization.project.api_key'


class Type43(str, Enum):
    """
    `user` or `service_account`
    """

    user = 'user'
    service_account = 'service_account'


class Object33(str, Enum):
    organization_project_api_key_deleted = 'organization.project.api_key.deleted'


class ProjectApiKeyDeleteResponse(Struct):
    object: Object33
    id: str
    deleted: bool


class Object34(str, Enum):
    list = 'list'


class ProjectCreateRequest(Struct):
    name: str
    """
    The friendly name of the project, this name appears in reports.
    """


class ProjectListResponse(Struct):
    object: Object34
    data: List[Project1]
    first_id: str
    last_id: str
    has_more: bool


class Object36(str, Enum):
    """
    The object type, which is always `project.rate_limit`
    """

    project_rate_limit = 'project.rate_limit'


class ProjectRateLimit(Struct):
    """
    Represents a project rate limit config.
    """

    object: Object36
    """
    The object type, which is always `project.rate_limit`
    """
    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    model: str
    """
    The model this rate limit applies to.
    """
    max_requests_per_1_minute: int
    """
    The maximum requests per minute.
    """
    max_tokens_per_1_minute: int
    """
    The maximum tokens per minute.
    """
    max_images_per_1_minute: Optional[int] = None
    """
    The maximum images per minute. Only present for relevant models.
    """
    max_audio_megabytes_per_1_minute: Optional[int] = None
    """
    The maximum audio megabytes per minute. Only present for relevant models.
    """
    max_requests_per_1_day: Optional[int] = None
    """
    The maximum requests per day. Only present for relevant models.
    """
    batch_1_day_max_input_tokens: Optional[int] = None
    """
    The maximum batch input tokens per day. Only present for relevant models.
    """


class Object37(str, Enum):
    list = 'list'


class ProjectRateLimitListResponse(Struct):
    object: Object37
    data: List[ProjectRateLimit]
    first_id: str
    last_id: str
    has_more: bool


class ProjectRateLimitUpdateRequest(Struct):
    max_requests_per_1_minute: Optional[int] = None
    """
    The maximum requests per minute.
    """
    max_tokens_per_1_minute: Optional[int] = None
    """
    The maximum tokens per minute.
    """
    max_images_per_1_minute: Optional[int] = None
    """
    The maximum images per minute. Only relevant for certain models.
    """
    max_audio_megabytes_per_1_minute: Optional[int] = None
    """
    The maximum audio megabytes per minute. Only relevant for certain models.
    """
    max_requests_per_1_day: Optional[int] = None
    """
    The maximum requests per day. Only relevant for certain models.
    """
    batch_1_day_max_input_tokens: Optional[int] = None
    """
    The maximum batch input tokens per day. Only relevant for certain models.
    """


class Object38(str, Enum):
    """
    The object type, which is always `organization.project.service_account`
    """

    organization_project_service_account = 'organization.project.service_account'


class Role12(str, Enum):
    """
    `owner` or `member`
    """

    owner = 'owner'
    member = 'member'


class ProjectServiceAccount(Struct):
    """
    Represents an individual service account in a project.
    """

    object: Object38
    """
    The object type, which is always `organization.project.service_account`
    """
    id: str
    """
    The identifier, which can be referenced in API endpoints
    """
    name: str
    """
    The name of the service account
    """
    role: Role12
    """
    `owner` or `member`
    """
    created_at: int
    """
    The Unix timestamp (in seconds) of when the service account was created
    """


class Object39(str, Enum):
    """
    The object type, which is always `organization.project.service_account.api_key`
    """

    organization_project_service_account_api_key = (
        'organization.project.service_account.api_key'
    )


class ProjectServiceAccountApiKey(Struct):
    object: Object39
    """
    The object type, which is always `organization.project.service_account.api_key`
    """
    value: str
    name: str
    created_at: int
    id: str


class ProjectServiceAccountCreateRequest(Struct):
    name: str
    """
    The name of the service account being created.
    """


class Object40(str, Enum):
    organization_project_service_account = 'organization.project.service_account'


class Role13(str, Enum):
    """
    Service accounts can only have one role of type `member`
    """

    member = 'member'


class ProjectServiceAccountCreateResponse(Struct):
    object: Object40
    id: str
    name: str
    role: Role13
    """
    Service accounts can only have one role of type `member`
    """
    created_at: int
    api_key: ProjectServiceAccountApiKey


class Object41(str, Enum):
    organization_project_service_account_deleted = (
        'organization.project.service_account.deleted'
    )


class ProjectServiceAccountDeleteResponse(Struct):
    object: Object41
    id: str
    deleted: bool


class Object42(str, Enum):
    list = 'list'


class ProjectServiceAccountListResponse(Struct):
    object: Object42
    data: List[ProjectServiceAccount]
    first_id: str
    last_id: str
    has_more: bool


class ProjectUpdateRequest(Struct):
    name: str
    """
    The updated name of the project, this name appears in reports.
    """


class Object43(str, Enum):
    """
    The object type, which is always `organization.project.user`
    """

    organization_project_user = 'organization.project.user'


class Role14(str, Enum):
    """
    `owner` or `member`
    """

    owner = 'owner'
    member = 'member'


class ProjectUser(Struct):
    """
    Represents an individual user in a project.
    """

    object: Object43
    """
    The object type, which is always `organization.project.user`
    """
    id: str
    """
    The identifier, which can be referenced in API endpoints
    """
    name: str
    """
    The name of the user
    """
    email: str
    """
    The email address of the user
    """
    role: Role14
    """
    `owner` or `member`
    """
    added_at: int
    """
    The Unix timestamp (in seconds) of when the project was added.
    """


class ProjectUserCreateRequest(Struct):
    user_id: str
    """
    The ID of the user.
    """
    role: Role14
    """
    `owner` or `member`
    """


class Object44(str, Enum):
    organization_project_user_deleted = 'organization.project.user.deleted'


class ProjectUserDeleteResponse(Struct):
    object: Object44
    id: str
    deleted: bool


class ProjectUserListResponse(Struct):
    object: str
    data: List[ProjectUser]
    first_id: str
    last_id: str
    has_more: bool


class ProjectUserUpdateRequest(Struct):
    role: Role14
    """
    `owner` or `member`
    """


class Type44(str, Enum):
    """
    The event type, must be `conversation.item.create`.
    """

    conversation_item_create = 'conversation.item.create'


class Type45(str, Enum):
    """
    The event type, must be `conversation.item.delete`.
    """

    conversation_item_delete = 'conversation.item.delete'


class RealtimeClientEventConversationItemDelete(Struct):
    """
    Send this event when you want to remove any item from the conversation
    history. The server will respond with a `conversation.item.deleted` event,
    unless the item does not exist in the conversation history, in which case the
    server will respond with an error.

    """

    type: Type45
    """
    The event type, must be `conversation.item.delete`.
    """
    item_id: str
    """
    The ID of the item to delete.
    """
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class Type46(str, Enum):
    """
    The event type, must be `conversation.item.truncate`.
    """

    conversation_item_truncate = 'conversation.item.truncate'


class RealtimeClientEventConversationItemTruncate(Struct):
    """
    Send this event to truncate a previous assistant message’s audio. The server
    will produce audio faster than realtime, so this event is useful when the user
    interrupts to truncate audio that has already been sent to the client but not
    yet played. This will synchronize the server's understanding of the audio with
    the client's playback.

    Truncating audio will delete the server-side text transcript to ensure there
    is not text in the context that hasn't been heard by the user.

    If successful, the server will respond with a `conversation.item.truncated`
    event.

    """

    type: Type46
    """
    The event type, must be `conversation.item.truncate`.
    """
    item_id: str
    """
    The ID of the assistant message item to truncate. Only assistant message 
    items can be truncated.

    """
    content_index: int
    """
    The index of the content part to truncate. Set this to 0.
    """
    audio_end_ms: int
    """
    Inclusive duration up to which audio is truncated, in milliseconds. If 
    the audio_end_ms is greater than the actual audio duration, the server 
    will respond with an error.

    """
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class Type47(str, Enum):
    """
    The event type, must be `input_audio_buffer.append`.
    """

    input_audio_buffer_append = 'input_audio_buffer.append'


class RealtimeClientEventInputAudioBufferAppend(Struct):
    """
    Send this event to append audio bytes to the input audio buffer. The audio
    buffer is temporary storage you can write to and later commit. In Server VAD
    mode, the audio buffer is used to detect speech and the server will decide
    when to commit. When Server VAD is disabled, you must commit the audio buffer
    manually.

    The client may choose how much audio to place in each event up to a maximum
    of 15 MiB, for example streaming smaller chunks from the client may allow the
    VAD to be more responsive. Unlike made other client events, the server will
    not send a confirmation response to this event.

    """

    type: Type47
    """
    The event type, must be `input_audio_buffer.append`.
    """
    audio: str
    """
    Base64-encoded audio bytes. This must be in the format specified by the 
    `input_audio_format` field in the session configuration.

    """
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class Type48(str, Enum):
    """
    The event type, must be `input_audio_buffer.clear`.
    """

    input_audio_buffer_clear = 'input_audio_buffer.clear'


class RealtimeClientEventInputAudioBufferClear(Struct):
    """
    Send this event to clear the audio bytes in the buffer. The server will
    respond with an `input_audio_buffer.cleared` event.

    """

    type: Type48
    """
    The event type, must be `input_audio_buffer.clear`.
    """
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class Type49(str, Enum):
    """
    The event type, must be `input_audio_buffer.commit`.
    """

    input_audio_buffer_commit = 'input_audio_buffer.commit'


class RealtimeClientEventInputAudioBufferCommit(Struct):
    """
    Send this event to commit the user input audio buffer, which will create a
    new user message item in the conversation. This event will produce an error
    if the input audio buffer is empty. When in Server VAD mode, the client does
    not need to send this event, the server will commit the audio buffer
    automatically.

    Committing the input audio buffer will trigger input audio transcription
    (if enabled in session configuration), but it will not create a response
    from the model. The server will respond with an `input_audio_buffer.committed`
    event.

    """

    type: Type49
    """
    The event type, must be `input_audio_buffer.commit`.
    """
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class Type50(str, Enum):
    """
    The event type, must be `response.cancel`.
    """

    response_cancel = 'response.cancel'


class RealtimeClientEventResponseCancel(Struct):
    """
    Send this event to cancel an in-progress response. The server will respond
    with a `response.cancelled` event or an error if there is no response to
    cancel.

    """

    type: Type50
    """
    The event type, must be `response.cancel`.
    """
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class Type51(str, Enum):
    """
    The event type, must be `response.create`.
    """

    response_create = 'response.create'


class Type52(str, Enum):
    """
    The event type, must be `session.update`.
    """

    session_update = 'session.update'


class Type53(str, Enum):
    """
    The type of the item (`message`, `function_call`, `function_call_output`).

    """

    message = 'message'
    function_call = 'function_call'
    function_call_output = 'function_call_output'


class Object45(str, Enum):
    """
    Identifier for the API object being returned - always `realtime.item`.

    """

    realtime_item = 'realtime.item'


class Status6(str, Enum):
    """
    The status of the item (`completed`, `incomplete`). These have no effect
    on the conversation, but are accepted for consistency with the
    `conversation.item.created` event.

    """

    completed = 'completed'
    incomplete = 'incomplete'


class Role17(str, Enum):
    """
    The role of the message sender (`user`, `assistant`, `system`), only
    applicable for `message` items.

    """

    user = 'user'
    assistant = 'assistant'
    systems = 'systems'


class Type54(str, Enum):
    """
    The content type (`input_text`, `input_audio`, `text`).
    """

    input_audio = 'input_audio'
    input_text = 'input_text'
    text = 'text'


class ContentItem(Struct):
    type: Optional[Type54] = None
    """
    The content type (`input_text`, `input_audio`, `text`).
    """
    text: Optional[str] = None
    """
    The text content, used for `input_text` and `text` content types.

    """
    audio: Optional[str] = None
    """
    Base64-encoded audio bytes, used for `input_audio` content type.

    """
    transcript: Optional[str] = None
    """
    The transcript of the audio, used for `input_audio` content type.

    """


class RealtimeConversationItem(Struct):
    """
    The item to add to the conversation.
    """

    id: Optional[str] = None
    """
    The unique ID of the item, this can be generated by the client to help 
    manage server-side context, but is not required because the server will 
    generate one if not provided.

    """
    type: Optional[Type53] = None
    """
    The type of the item (`message`, `function_call`, `function_call_output`).

    """
    object: Optional[Object45] = None
    """
    Identifier for the API object being returned - always `realtime.item`.

    """
    status: Optional[Status6] = None
    """
    The status of the item (`completed`, `incomplete`). These have no effect 
    on the conversation, but are accepted for consistency with the 
    `conversation.item.created` event.

    """
    role: Optional[Role17] = None
    """
    The role of the message sender (`user`, `assistant`, `system`), only 
    applicable for `message` items.

    """
    content: Optional[List[ContentItem]] = None
    """
    The content of the message, applicable for `message` items. 
    - Message items of role `system` support only `input_text` content
    - Message items of role `user` support `input_text` and `input_audio` 
      content
    - Message items of role `assistant` support `text` content.

    """
    call_id: Optional[str] = None
    """
    The ID of the function call (for `function_call` and 
    `function_call_output` items). If passed on a `function_call_output` 
    item, the server will check that a `function_call` item with the same 
    ID exists in the conversation history.

    """
    name: Optional[str] = None
    """
    The name of the function being called (for `function_call` items).

    """
    arguments: Optional[str] = None
    """
    The arguments of the function call (for `function_call` items).

    """
    output: Optional[str] = None
    """
    The output of the function call (for `function_call_output` items).

    """


class Object46(str, Enum):
    """
    The object type, must be `realtime.response`.
    """

    realtime_response = 'realtime.response'


class Status7(str, Enum):
    """
    The final status of the response (`completed`, `cancelled`, `failed`, or
    `incomplete`).

    """

    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'
    incomplete = 'incomplete'


class Type55(str, Enum):
    """
    The type of error that caused the response to fail, corresponding
    with the `status` field (`cancelled`, `incomplete`, `failed`).

    """

    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'
    incomplete = 'incomplete'


class Reason1(str, Enum):
    """
    The reason the Response did not complete. For a `cancelled` Response,
    one of `turn_detected` (the server VAD detected a new start of speech)
    or `client_cancelled` (the client sent a cancel event). For an
    `incomplete` Response, one of `max_output_tokens` or `content_filter`
    (the server-side safety filter activated and cut off the response).

    """

    turn_detected = 'turn_detected'
    client_cancelled = 'client_cancelled'
    max_output_tokens = 'max_output_tokens'
    content_filter = 'content_filter'


class Error3(Struct):
    """
    A description of the error that caused the response to fail,
    populated when the `status` is `failed`.

    """

    type: Optional[str] = None
    """
    The type of error.
    """
    code: Optional[str] = None
    """
    Error code, if any.
    """


class StatusDetails(Struct):
    """
    Additional details about the status.
    """

    type: Optional[Type55] = None
    """
    The type of error that caused the response to fail, corresponding 
    with the `status` field (`cancelled`, `incomplete`, `failed`).

    """
    reason: Optional[Reason1] = None
    """
    The reason the Response did not complete. For a `cancelled` Response, 
    one of `turn_detected` (the server VAD detected a new start of speech) 
    or `client_cancelled` (the client sent a cancel event). For an 
    `incomplete` Response, one of `max_output_tokens` or `content_filter` 
    (the server-side safety filter activated and cut off the response).

    """
    error: Optional[Error3] = None
    """
    A description of the error that caused the response to fail, 
    populated when the `status` is `failed`.

    """


class InputTokenDetails(Struct):
    """
    Details about the input tokens used in the Response.
    """

    cached_tokens: Optional[int] = None
    """
    The number of cached tokens used in the Response.
    """
    text_tokens: Optional[int] = None
    """
    The number of text tokens used in the Response.
    """
    audio_tokens: Optional[int] = None
    """
    The number of audio tokens used in the Response.
    """


class OutputTokenDetails(Struct):
    """
    Details about the output tokens used in the Response.
    """

    text_tokens: Optional[int] = None
    """
    The number of text tokens used in the Response.
    """
    audio_tokens: Optional[int] = None
    """
    The number of audio tokens used in the Response.
    """


class Usage2(Struct):
    """
    Usage statistics for the Response, this will correspond to billing. A
    Realtime API session will maintain a conversation context and append new
    Items to the Conversation, thus output from previous turns (text and
    audio tokens) will become the input for later turns.

    """

    total_tokens: Optional[int] = None
    """
    The total number of tokens in the Response including input and output 
    text and audio tokens.

    """
    input_tokens: Optional[int] = None
    """
    The number of input tokens used in the Response, including text and 
    audio tokens.

    """
    output_tokens: Optional[int] = None
    """
    The number of output tokens sent in the Response, including text and 
    audio tokens.

    """
    input_token_details: Optional[InputTokenDetails] = None
    """
    Details about the input tokens used in the Response.
    """
    output_token_details: Optional[OutputTokenDetails] = None
    """
    Details about the output tokens used in the Response.
    """


class RealtimeResponse(Struct):
    """
    The response resource.
    """

    id: Optional[str] = None
    """
    The unique ID of the response.
    """
    object: Optional[Object46] = None
    """
    The object type, must be `realtime.response`.
    """
    status: Optional[Status7] = None
    """
    The final status of the response (`completed`, `cancelled`, `failed`, or 
    `incomplete`).

    """
    status_details: Optional[StatusDetails] = None
    """
    Additional details about the status.
    """
    output: Optional[List[RealtimeConversationItem]] = None
    """
    The list of output items generated by the response.
    """
    usage: Optional[Usage2] = None
    """
    Usage statistics for the Response, this will correspond to billing. A 
    Realtime API session will maintain a conversation context and append new 
    Items to the Conversation, thus output from previous turns (text and 
    audio tokens) will become the input for later turns.

    """


class Type56(str, Enum):
    """
    The event type, must be `conversation.created`.
    """

    conversation_created = 'conversation.created'


class Conversation(Struct):
    """
    The conversation resource.
    """

    id: Optional[str] = None
    """
    The unique ID of the conversation.
    """
    object: Optional[str] = None
    """
    The object type, must be `realtime.conversation`.
    """


class RealtimeServerEventConversationCreated(Struct):
    """
    Returned when a conversation is created. Emitted right after session creation.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type56
    """
    The event type, must be `conversation.created`.
    """
    conversation: Conversation
    """
    The conversation resource.
    """


class Type57(str, Enum):
    """
    The event type, must be `conversation.item.created`.
    """

    conversation_item_created = 'conversation.item.created'


class RealtimeServerEventConversationItemCreated(Struct):
    """
    Returned when a conversation item is created. There are several scenarios that
    produce this event:
      - The server is generating a Response, which if successful will produce
        either one or two Items, which will be of type `message`
        (role `assistant`) or type `function_call`.
      - The input audio buffer has been committed, either by the client or the
        server (in `server_vad` mode). The server will take the content of the
        input audio buffer and add it to a new user message Item.
      - The client has sent a `conversation.item.create` event to add a new Item
        to the Conversation.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type57
    """
    The event type, must be `conversation.item.created`.
    """
    previous_item_id: str
    """
    The ID of the preceding item in the Conversation context, allows the 
    client to understand the order of the conversation.

    """
    item: RealtimeConversationItem


class Type58(str, Enum):
    """
    The event type, must be `conversation.item.deleted`.
    """

    conversation_item_deleted = 'conversation.item.deleted'


class RealtimeServerEventConversationItemDeleted(Struct):
    """
    Returned when an item in the conversation is deleted by the client with a
    `conversation.item.delete` event. This event is used to synchronize the
    server's understanding of the conversation history with the client's view.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type58
    """
    The event type, must be `conversation.item.deleted`.
    """
    item_id: str
    """
    The ID of the item that was deleted.
    """


class Type59(str, Enum):
    """
    The event type, must be
    `conversation.item.input_audio_transcription.completed`.

    """

    conversation_item_input_audio_transcription_completed = (
        'conversation.item.input_audio_transcription.completed'
    )


class RealtimeServerEventConversationItemInputAudioTranscriptionCompleted(Struct):
    """
    This event is the output of audio transcription for user audio written to the
    user audio buffer. Transcription begins when the input audio buffer is
    committed by the client or server (in `server_vad` mode). Transcription runs
    asynchronously with Response creation, so this event may come before or after
    the Response events.

    Realtime API models accept audio natively, and thus input transcription is a
    separate process run on a separate ASR (Automatic Speech Recognition) model,
    currently always `whisper-1`. Thus the transcript may diverge somewhat from
    the model's interpretation, and should be treated as a rough guide.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type59
    """
    The event type, must be
    `conversation.item.input_audio_transcription.completed`.

    """
    item_id: str
    """
    The ID of the user message item containing the audio.
    """
    content_index: int
    """
    The index of the content part containing the audio.
    """
    transcript: str
    """
    The transcribed text.
    """


class Type60(str, Enum):
    """
    The event type, must be
    `conversation.item.input_audio_transcription.failed`.

    """

    conversation_item_input_audio_transcription_failed = (
        'conversation.item.input_audio_transcription.failed'
    )


class Error4(Struct):
    """
    Details of the transcription error.
    """

    type: Optional[str] = None
    """
    The type of error.
    """
    code: Optional[str] = None
    """
    Error code, if any.
    """
    message: Optional[str] = None
    """
    A human-readable error message.
    """
    param: Optional[str] = None
    """
    Parameter related to the error, if any.
    """


class RealtimeServerEventConversationItemInputAudioTranscriptionFailed(Struct):
    """
    Returned when input audio transcription is configured, and a transcription
    request for a user message failed. These events are separate from other
    `error` events so that the client can identify the related Item.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type60
    """
    The event type, must be
    `conversation.item.input_audio_transcription.failed`.

    """
    item_id: str
    """
    The ID of the user message item.
    """
    content_index: int
    """
    The index of the content part containing the audio.
    """
    error: Error4
    """
    Details of the transcription error.
    """


class Type61(str, Enum):
    """
    The event type, must be `conversation.item.truncated`.
    """

    conversation_item_truncated = 'conversation.item.truncated'


class RealtimeServerEventConversationItemTruncated(Struct):
    """
    Returned when an earlier assistant audio message item is truncated by the
    client with a `conversation.item.truncate` event. This event is used to
    synchronize the server's understanding of the audio with the client's playback.

    This action will truncate the audio and remove the server-side text transcript
    to ensure there is no text in the context that hasn't been heard by the user.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type61
    """
    The event type, must be `conversation.item.truncated`.
    """
    item_id: str
    """
    The ID of the assistant message item that was truncated.
    """
    content_index: int
    """
    The index of the content part that was truncated.
    """
    audio_end_ms: int
    """
    The duration up to which the audio was truncated, in milliseconds.

    """


class Type62(str, Enum):
    """
    The event type, must be `error`.
    """

    error = 'error'


class Error5(Struct):
    """
    Details of the error.
    """

    type: Optional[str] = None
    """
    The type of error (e.g., "invalid_request_error", "server_error").

    """
    code: Optional[str] = None
    """
    Error code, if any.
    """
    message: Optional[str] = None
    """
    A human-readable error message.
    """
    param: Optional[str] = None
    """
    Parameter related to the error, if any.
    """
    event_id: Optional[str] = None
    """
    The event_id of the client event that caused the error, if applicable.

    """


class RealtimeServerEventError(Struct):
    """
    Returned when an error occurs, which could be a client problem or a server
    problem. Most errors are recoverable and the session will stay open, we
    recommend to implementors to monitor and log error messages by default.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type62
    """
    The event type, must be `error`.
    """
    error: Error5
    """
    Details of the error.
    """


class Type63(str, Enum):
    """
    The event type, must be `input_audio_buffer.cleared`.
    """

    input_audio_buffer_cleared = 'input_audio_buffer.cleared'


class RealtimeServerEventInputAudioBufferCleared(Struct):
    """
    Returned when the input audio buffer is cleared by the client with a
    `input_audio_buffer.clear` event.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type63
    """
    The event type, must be `input_audio_buffer.cleared`.
    """


class Type64(str, Enum):
    """
    The event type, must be `input_audio_buffer.committed`.
    """

    input_audio_buffer_committed = 'input_audio_buffer.committed'


class RealtimeServerEventInputAudioBufferCommitted(Struct):
    """
    Returned when an input audio buffer is committed, either by the client or
    automatically in server VAD mode. The `item_id` property is the ID of the user
    message item that will be created, thus a `conversation.item.created` event
    will also be sent to the client.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type64
    """
    The event type, must be `input_audio_buffer.committed`.
    """
    previous_item_id: str
    """
    The ID of the preceding item after which the new item will be inserted.

    """
    item_id: str
    """
    The ID of the user message item that will be created.
    """


class Type65(str, Enum):
    """
    The event type, must be `input_audio_buffer.speech_started`.
    """

    input_audio_buffer_speech_started = 'input_audio_buffer.speech_started'


class RealtimeServerEventInputAudioBufferSpeechStarted(Struct):
    """
    Sent by the server when in `server_vad` mode to indicate that speech has been
    detected in the audio buffer. This can happen any time audio is added to the
    buffer (unless speech is already detected). The client may want to use this
    event to interrupt audio playback or provide visual feedback to the user.

    The client should expect to receive a `input_audio_buffer.speech_stopped` event
    when speech stops. The `item_id` property is the ID of the user message item
    that will be created when speech stops and will also be included in the
    `input_audio_buffer.speech_stopped` event (unless the client manually commits
    the audio buffer during VAD activation).

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type65
    """
    The event type, must be `input_audio_buffer.speech_started`.
    """
    audio_start_ms: int
    """
    Milliseconds from the start of all audio written to the buffer during the 
    session when speech was first detected. This will correspond to the 
    beginning of audio sent to the model, and thus includes the 
    `prefix_padding_ms` configured in the Session.

    """
    item_id: str
    """
    The ID of the user message item that will be created when speech stops.

    """


class Type66(str, Enum):
    """
    The event type, must be `input_audio_buffer.speech_stopped`.
    """

    input_audio_buffer_speech_stopped = 'input_audio_buffer.speech_stopped'


class RealtimeServerEventInputAudioBufferSpeechStopped(Struct):
    """
    Returned in `server_vad` mode when the server detects the end of speech in
    the audio buffer. The server will also send an `conversation.item.created`
    event with the user message item that is created from the audio buffer.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type66
    """
    The event type, must be `input_audio_buffer.speech_stopped`.
    """
    audio_end_ms: int
    """
    Milliseconds since the session started when speech stopped. This will 
    correspond to the end of audio sent to the model, and thus includes the 
    `min_silence_duration_ms` configured in the Session.

    """
    item_id: str
    """
    The ID of the user message item that will be created.
    """


class Type67(str, Enum):
    """
    The event type, must be `rate_limits.updated`.
    """

    rate_limits_updated = 'rate_limits.updated'


class RateLimit(Struct):
    name: Optional[str] = None
    """
    The name of the rate limit (`requests`, `tokens`).
    """
    limit: Optional[int] = None
    """
    The maximum allowed value for the rate limit.
    """
    remaining: Optional[int] = None
    """
    The remaining value before the limit is reached.
    """
    reset_seconds: Optional[float] = None
    """
    Seconds until the rate limit resets.
    """


class RealtimeServerEventRateLimitsUpdated(Struct):
    """
    Emitted at the beginning of a Response to indicate the updated rate limits.
    When a Response is created some tokens will be "reserved" for the output
    tokens, the rate limits shown here reflect that reservation, which is then
    adjusted accordingly once the Response is completed.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type67
    """
    The event type, must be `rate_limits.updated`.
    """
    rate_limits: List[RateLimit]
    """
    List of rate limit information.
    """


class Type68(str, Enum):
    """
    The event type, must be `response.audio.delta`.
    """

    response_audio_delta = 'response.audio.delta'


class RealtimeServerEventResponseAudioDelta(Struct):
    """
    Returned when the model-generated audio is updated.
    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type68
    """
    The event type, must be `response.audio.delta`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """
    delta: str
    """
    Base64-encoded audio data delta.
    """


class Type69(str, Enum):
    """
    The event type, must be `response.audio.done`.
    """

    response_audio_done = 'response.audio.done'


class RealtimeServerEventResponseAudioDone(Struct):
    """
    Returned when the model-generated audio is done. Also emitted when a Response
    is interrupted, incomplete, or cancelled.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type69
    """
    The event type, must be `response.audio.done`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """


class Type70(str, Enum):
    """
    The event type, must be `response.audio_transcript.delta`.
    """

    response_audio_transcript_delta = 'response.audio_transcript.delta'


class RealtimeServerEventResponseAudioTranscriptDelta(Struct):
    """
    Returned when the model-generated transcription of audio output is updated.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type70
    """
    The event type, must be `response.audio_transcript.delta`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """
    delta: str
    """
    The transcript delta.
    """


class Type71(str, Enum):
    """
    The event type, must be `response.audio_transcript.done`.
    """

    response_audio_transcript_done = 'response.audio_transcript.done'


class RealtimeServerEventResponseAudioTranscriptDone(Struct):
    """
    Returned when the model-generated transcription of audio output is done
    streaming. Also emitted when a Response is interrupted, incomplete, or
    cancelled.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type71
    """
    The event type, must be `response.audio_transcript.done`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """
    transcript: str
    """
    The final transcript of the audio.
    """


class Type72(str, Enum):
    """
    The event type, must be `response.content_part.added`.
    """

    response_content_part_added = 'response.content_part.added'


class Type73(str, Enum):
    """
    The content type ("text", "audio").
    """

    audio = 'audio'
    text = 'text'


class Part(Struct):
    """
    The content part that was added.
    """

    type: Optional[Type73] = None
    """
    The content type ("text", "audio").
    """
    text: Optional[str] = None
    """
    The text content (if type is "text").
    """
    audio: Optional[str] = None
    """
    Base64-encoded audio data (if type is "audio").
    """
    transcript: Optional[str] = None
    """
    The transcript of the audio (if type is "audio").
    """


class RealtimeServerEventResponseContentPartAdded(Struct):
    """
    Returned when a new content part is added to an assistant message item during
    response generation.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type72
    """
    The event type, must be `response.content_part.added`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item to which the content part was added.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """
    part: Part
    """
    The content part that was added.
    """


class Type74(str, Enum):
    """
    The event type, must be `response.content_part.done`.
    """

    response_content_part_done = 'response.content_part.done'


class Part1(Struct):
    """
    The content part that is done.
    """

    type: Optional[str] = None
    """
    The content type ("text", "audio").
    """
    text: Optional[str] = None
    """
    The text content (if type is "text").
    """
    audio: Optional[str] = None
    """
    Base64-encoded audio data (if type is "audio").
    """
    transcript: Optional[str] = None
    """
    The transcript of the audio (if type is "audio").
    """


class RealtimeServerEventResponseContentPartDone(Struct):
    """
    Returned when a content part is done streaming in an assistant message item.
    Also emitted when a Response is interrupted, incomplete, or cancelled.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type74
    """
    The event type, must be `response.content_part.done`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """
    part: Part1
    """
    The content part that is done.
    """


class Type75(str, Enum):
    """
    The event type, must be `response.created`.
    """

    response_created = 'response.created'


class RealtimeServerEventResponseCreated(Struct):
    """
    Returned when a new Response is created. The first event of response creation,
    where the response is in an initial state of `in_progress`.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type75
    """
    The event type, must be `response.created`.
    """
    response: RealtimeResponse


class Type76(str, Enum):
    """
    The event type, must be `response.done`.
    """

    response_done = 'response.done'


class RealtimeServerEventResponseDone(Struct):
    """
    Returned when a Response is done streaming. Always emitted, no matter the
    final state. The Response object included in the `response.done` event will
    include all output Items in the Response but will omit the raw audio data.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type76
    """
    The event type, must be `response.done`.
    """
    response: RealtimeResponse


class Type77(str, Enum):
    """
    The event type, must be `response.function_call_arguments.delta`.

    """

    response_function_call_arguments_delta = 'response.function_call_arguments.delta'


class RealtimeServerEventResponseFunctionCallArgumentsDelta(Struct):
    """
    Returned when the model-generated function call arguments are updated.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type77
    """
    The event type, must be `response.function_call_arguments.delta`.

    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the function call item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    call_id: str
    """
    The ID of the function call.
    """
    delta: str
    """
    The arguments delta as a JSON string.
    """


class Type78(str, Enum):
    """
    The event type, must be `response.function_call_arguments.done`.

    """

    response_function_call_arguments_done = 'response.function_call_arguments.done'


class RealtimeServerEventResponseFunctionCallArgumentsDone(Struct):
    """
    Returned when the model-generated function call arguments are done streaming.
    Also emitted when a Response is interrupted, incomplete, or cancelled.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type78
    """
    The event type, must be `response.function_call_arguments.done`.

    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the function call item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    call_id: str
    """
    The ID of the function call.
    """
    arguments: str
    """
    The final arguments as a JSON string.
    """


class Type79(str, Enum):
    """
    The event type, must be `response.output_item.added`.
    """

    response_output_item_added = 'response.output_item.added'


class RealtimeServerEventResponseOutputItemAdded(Struct):
    """
    Returned when a new Item is created during Response generation.
    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type79
    """
    The event type, must be `response.output_item.added`.
    """
    response_id: str
    """
    The ID of the Response to which the item belongs.
    """
    output_index: int
    """
    The index of the output item in the Response.
    """
    item: RealtimeConversationItem


class Type80(str, Enum):
    """
    The event type, must be `response.output_item.done`.
    """

    response_output_item_done = 'response.output_item.done'


class RealtimeServerEventResponseOutputItemDone(Struct):
    """
    Returned when an Item is done streaming. Also emitted when a Response is
    interrupted, incomplete, or cancelled.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type80
    """
    The event type, must be `response.output_item.done`.
    """
    response_id: str
    """
    The ID of the Response to which the item belongs.
    """
    output_index: int
    """
    The index of the output item in the Response.
    """
    item: RealtimeConversationItem


class Type81(str, Enum):
    """
    The event type, must be `response.text.delta`.
    """

    response_text_delta = 'response.text.delta'


class RealtimeServerEventResponseTextDelta(Struct):
    """
    Returned when the text value of a "text" content part is updated.
    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type81
    """
    The event type, must be `response.text.delta`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """
    delta: str
    """
    The text delta.
    """


class Type82(str, Enum):
    """
    The event type, must be `response.text.done`.
    """

    response_text_done = 'response.text.done'


class RealtimeServerEventResponseTextDone(Struct):
    """
    Returned when the text value of a "text" content part is done streaming. Also
    emitted when a Response is interrupted, incomplete, or cancelled.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type82
    """
    The event type, must be `response.text.done`.
    """
    response_id: str
    """
    The ID of the response.
    """
    item_id: str
    """
    The ID of the item.
    """
    output_index: int
    """
    The index of the output item in the response.
    """
    content_index: int
    """
    The index of the content part in the item's content array.
    """
    text: str
    """
    The final text content.
    """


class Type83(str, Enum):
    """
    The event type, must be `session.created`.
    """

    session_created = 'session.created'


class Type84(str, Enum):
    """
    The event type, must be `session.updated`.
    """

    session_updated = 'session.updated'


class Modality(str, Enum):
    text = 'text'
    audio = 'audio'


class Voice2(str, Enum):
    """
    The voice the model uses to respond. Current voice options are `ash`,
    `ballad`, `coral`, `sage`, and `verse`.

    Also supported but not recommended are `alloy`, `echo`, and `shimmer`.
    These older voices are less expressive.

    Voice cannot be changed during the session once the model has
    responded with audio at least once.

    """

    alloy = 'alloy'
    ash = 'ash'
    ballad = 'ballad'
    coral = 'coral'
    echo = 'echo'
    sage = 'sage'
    shimmer = 'shimmer'
    verse = 'verse'


class InputAudioTranscription(Struct):
    """
    Configuration for input audio transcription, defaults to off and can be
    set to `null` to turn off once on. Input audio transcription is not native
    to the model, since the model consumes audio directly. Transcription runs
    asynchronously through Whisper and should be treated as rough guidance
    rather than the representation understood by the model.

    """

    model: Optional[str] = None
    """
    The model to use for transcription, `whisper-1` is the only currently 
    supported model.

    """


class TurnDetection(Struct):
    """
    Configuration for turn detection. Can be set to `null` to turn off. Server
    VAD means that the model will detect the start and end of speech based on
    audio volume and respond at the end of user speech.

    """

    type: Optional[str] = None
    """
    Type of turn detection, only `server_vad` is currently supported.

    """
    threshold: Optional[float] = None
    """
    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
    higher threshold will require louder audio to activate the model, and 
    thus might perform better in noisy environments.

    """
    prefix_padding_ms: Optional[int] = None
    """
    Amount of audio to include before the VAD detected speech (in 
    milliseconds). Defaults to 300ms.

    """
    silence_duration_ms: Optional[int] = None
    """
    Duration of silence to detect speech stop (in milliseconds). Defaults 
    to 500ms. With shorter values the model will respond more quickly, 
    but may jump in on short pauses from the user.

    """


class Type85(str, Enum):
    """
    The type of the tool, i.e. `function`.
    """

    function = 'function'


class Tool(Struct):
    type: Optional[Type85] = None
    """
    The type of the tool, i.e. `function`.
    """
    name: Optional[str] = None
    """
    The name of the function.
    """
    description: Optional[str] = None
    """
    The description of the function, including guidance on when and how 
    to call it, and guidance about what to tell the user when calling 
    (if anything).

    """
    parameters: Optional[Dict[str, Any]] = None
    """
    Parameters of the function in JSON Schema.
    """


class MaxResponseOutputTokens(str, Enum):
    """
    Maximum number of output tokens for a single assistant response,
    inclusive of tool calls. Provide an integer between 1 and 4096 to
    limit output tokens, or `inf` for the maximum available tokens for a
    given model. Defaults to `inf`.

    """

    inf = 'inf'


class RealtimeSession(Struct):
    """
    Realtime session object configuration.
    """

    modalities: Optional[List[Modality]] = None
    """
    The set of modalities the model can respond with. To disable audio,
    set this to ["text"].

    """
    instructions: Optional[str] = None
    """
    The default system instructions (i.e. system message) prepended to model 
    calls. This field allows the client to guide the model on desired 
    responses. The model can be instructed on response content and format, 
    (e.g. "be extremely succinct", "act friendly", "here are examples of good 
    responses") and on audio behavior (e.g. "talk quickly", "inject emotion 
    into your voice", "laugh frequently"). The instructions are not guaranteed 
    to be followed by the model, but they provide guidance to the model on the 
    desired behavior.

    Note that the server sets default instructions which will be used if this 
    field is not set and are visible in the `session.created` event at the 
    start of the session.

    """
    voice: Optional[Voice2] = None
    """
    The voice the model uses to respond. Current voice options are `ash`, 
    `ballad`, `coral`, `sage`, and `verse`. 

    Also supported but not recommended are `alloy`, `echo`, and `shimmer`. 
    These older voices are less expressive. 

    Voice cannot be changed during the session once the model has 
    responded with audio at least once.

    """
    input_audio_format: Optional[str] = None
    """
    The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.

    """
    output_audio_format: Optional[str] = None
    """
    The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.

    """
    input_audio_transcription: Optional[InputAudioTranscription] = None
    """
    Configuration for input audio transcription, defaults to off and can be 
    set to `null` to turn off once on. Input audio transcription is not native 
    to the model, since the model consumes audio directly. Transcription runs 
    asynchronously through Whisper and should be treated as rough guidance 
    rather than the representation understood by the model.

    """
    turn_detection: Optional[TurnDetection] = None
    """
    Configuration for turn detection. Can be set to `null` to turn off. Server 
    VAD means that the model will detect the start and end of speech based on 
    audio volume and respond at the end of user speech.

    """
    tools: Optional[List[Tool]] = None
    """
    Tools (functions) available to the model.
    """
    tool_choice: Optional[str] = None
    """
    How the model chooses tools. Options are `auto`, `none`, `required`, or 
    specify a function.

    """
    temperature: Optional[float] = None
    """
    Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.

    """
    max_response_output_tokens: Optional[Union[int, MaxResponseOutputTokens]] = None
    """
    Maximum number of output tokens for a single assistant response,
    inclusive of tool calls. Provide an integer between 1 and 4096 to
    limit output tokens, or `inf` for the maximum available tokens for a
    given model. Defaults to `inf`.

    """


class Type86(str, Enum):
    """
    The type of response format being defined: `json_object`
    """

    json_object = 'json_object'


class ResponseFormatJsonObject(Struct):
    type: Type86
    """
    The type of response format being defined: `json_object`
    """


class Type87(str, Enum):
    """
    The type of response format being defined: `json_schema`
    """

    json_schema = 'json_schema'


class ResponseFormatJsonSchemaSchema(Struct):
    """
    The schema for the response format, described as a JSON Schema object.
    """


class Type88(str, Enum):
    """
    The type of response format being defined: `text`
    """

    text = 'text'


class ResponseFormatText(Struct):
    type: Type88
    """
    The type of response format being defined: `text`
    """


class RunCompletionUsage(Struct):
    """
    Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
    """

    completion_tokens: int
    """
    Number of completion tokens used over the course of the run.
    """
    prompt_tokens: int
    """
    Number of prompt tokens used over the course of the run.
    """
    total_tokens: int
    """
    Total number of tokens used (prompt + completion).
    """


class Object47(str, Enum):
    """
    The object type, which is always `thread.run`.
    """

    thread_run = 'thread.run'


class Status8(str, Enum):
    """
    The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
    """

    queued = 'queued'
    in_progress = 'in_progress'
    requires_action = 'requires_action'
    cancelling = 'cancelling'
    cancelled = 'cancelled'
    failed = 'failed'
    completed = 'completed'
    incomplete = 'incomplete'
    expired = 'expired'


class Type89(str, Enum):
    """
    For now, this is always `submit_tool_outputs`.
    """

    submit_tool_outputs = 'submit_tool_outputs'


class Code(str, Enum):
    """
    One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
    """

    server_error = 'server_error'
    rate_limit_exceeded = 'rate_limit_exceeded'
    invalid_prompt = 'invalid_prompt'


class LastError(Struct):
    """
    The last error associated with this run. Will be `null` if there are no errors.
    """

    code: Code
    """
    One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
    """
    message: str
    """
    A human-readable description of the error.
    """


class Reason2(str, Enum):
    """
    The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
    """

    max_completion_tokens = 'max_completion_tokens'
    max_prompt_tokens = 'max_prompt_tokens'


class IncompleteDetails1(Struct):
    """
    Details on why the run is incomplete. Will be `null` if the run is not incomplete.
    """

    reason: Optional[Reason2] = None
    """
    The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
    """


class RunStepCompletionUsage(Struct):
    """
    Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
    """

    completion_tokens: int
    """
    Number of completion tokens used over the course of the run step.
    """
    prompt_tokens: int
    """
    Number of prompt tokens used over the course of the run step.
    """
    total_tokens: int
    """
    Total number of tokens used (prompt + completion).
    """


class Object48(str, Enum):
    """
    The object type, which is always `thread.run.step.delta`.
    """

    thread_run_step_delta = 'thread.run.step.delta'


class Type90(str, Enum):
    """
    Always `message_creation`.
    """

    message_creation = 'message_creation'


class MessageCreation(Struct):
    message_id: Optional[str] = None
    """
    The ID of the message that was created by this run step.
    """


class RunStepDeltaStepDetailsMessageCreationObject(Struct):
    """
    Details of the message creation by the run step.
    """

    type: Type90
    """
    Always `message_creation`.
    """
    message_creation: Optional[MessageCreation] = None


class Type91(str, Enum):
    """
    The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
    """

    code_interpreter = 'code_interpreter'


class Type92(str, Enum):
    """
    Always `image`.
    """

    image = 'image'


class Image1(Struct):
    file_id: Optional[str] = None
    """
    The [file](/docs/api-reference/files) ID of the image.
    """


class RunStepDeltaStepDetailsToolCallsCodeOutputImageObject(Struct):
    index: int
    """
    The index of the output in the outputs array.
    """
    type: Type92
    """
    Always `image`.
    """
    image: Optional[Image1] = None


class Type93(str, Enum):
    """
    Always `logs`.
    """

    logs = 'logs'


class RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(Struct):
    """
    Text output from the Code Interpreter tool call as part of a run step.
    """

    index: int
    """
    The index of the output in the outputs array.
    """
    type: Type93
    """
    Always `logs`.
    """
    logs: Optional[str] = None
    """
    The text output from the Code Interpreter tool call.
    """


class Type94(str, Enum):
    """
    The type of tool call. This is always going to be `file_search` for this type of tool call.
    """

    file_search = 'file_search'


class RunStepDeltaStepDetailsToolCallsFileSearchObject(Struct):
    index: int
    """
    The index of the tool call in the tool calls array.
    """
    type: Type94
    """
    The type of tool call. This is always going to be `file_search` for this type of tool call.
    """
    file_search: Dict[str, Any]
    """
    For now, this is always going to be an empty object.
    """
    id: Optional[str] = None
    """
    The ID of the tool call object.
    """


class Type95(str, Enum):
    """
    The type of tool call. This is always going to be `function` for this type of tool call.
    """

    function = 'function'


class Function4(Struct):
    """
    The definition of the function that was called.
    """

    name: Optional[str] = None
    """
    The name of the function.
    """
    arguments: Optional[str] = None
    """
    The arguments passed to the function.
    """
    output: Optional[str] = None
    """
    The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
    """


class RunStepDeltaStepDetailsToolCallsFunctionObject(Struct):
    index: int
    """
    The index of the tool call in the tool calls array.
    """
    type: Type95
    """
    The type of tool call. This is always going to be `function` for this type of tool call.
    """
    id: Optional[str] = None
    """
    The ID of the tool call object.
    """
    function: Optional[Function4] = None
    """
    The definition of the function that was called.
    """


class Type96(str, Enum):
    """
    Always `tool_calls`.
    """

    tool_calls = 'tool_calls'


class Type97(str, Enum):
    """
    Always `message_creation`.
    """

    message_creation = 'message_creation'


class MessageCreation1(Struct):
    message_id: str
    """
    The ID of the message that was created by this run step.
    """


class RunStepDetailsMessageCreationObject(Struct):
    """
    Details of the message creation by the run step.
    """

    type: Type97
    """
    Always `message_creation`.
    """
    message_creation: MessageCreation1


class Type98(str, Enum):
    """
    The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
    """

    code_interpreter = 'code_interpreter'


class Type99(str, Enum):
    """
    Always `image`.
    """

    image = 'image'


class Image2(Struct):
    file_id: str
    """
    The [file](/docs/api-reference/files) ID of the image.
    """


class RunStepDetailsToolCallsCodeOutputImageObject(Struct):
    type: Type99
    """
    Always `image`.
    """
    image: Image2


class Type100(str, Enum):
    """
    Always `logs`.
    """

    logs = 'logs'


class RunStepDetailsToolCallsCodeOutputLogsObject(Struct):
    """
    Text output from the Code Interpreter tool call as part of a run step.
    """

    type: Type100
    """
    Always `logs`.
    """
    logs: str
    """
    The text output from the Code Interpreter tool call.
    """


class Type101(str, Enum):
    """
    The type of tool call. This is always going to be `file_search` for this type of tool call.
    """

    file_search = 'file_search'


class Ranker1(str, Enum):
    """
    The ranker used for the file search.
    """

    default_2024_08_21 = 'default_2024_08_21'


class RunStepDetailsToolCallsFileSearchRankingOptionsObject(Struct):
    """
    The ranking options for the file search.
    """

    ranker: Ranker1
    """
    The ranker used for the file search.
    """
    score_threshold: float
    """
    The score threshold for the file search. All values must be a floating point number between 0 and 1.
    """


class Type102(str, Enum):
    """
    The type of the content.
    """

    text = 'text'


class ContentItem1(Struct):
    type: Optional[Type102] = None
    """
    The type of the content.
    """
    text: Optional[str] = None
    """
    The text content of the file.
    """


class RunStepDetailsToolCallsFileSearchResultObject(Struct):
    """
    A result instance of the file search.
    """

    file_id: str
    """
    The ID of the file that result was found in.
    """
    file_name: str
    """
    The name of the file that result was found in.
    """
    score: float
    """
    The score of the result. All values must be a floating point number between 0 and 1.
    """
    content: Optional[List[ContentItem1]] = None
    """
    The content of the result that was found. The content is only included if requested via the include query parameter.
    """


class Type103(str, Enum):
    """
    The type of tool call. This is always going to be `function` for this type of tool call.
    """

    function = 'function'


class Function5(Struct):
    """
    The definition of the function that was called.
    """

    name: str
    """
    The name of the function.
    """
    arguments: str
    """
    The arguments passed to the function.
    """
    output: Optional[str] = None
    """
    The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
    """


class RunStepDetailsToolCallsFunctionObject(Struct):
    id: str
    """
    The ID of the tool call object.
    """
    type: Type103
    """
    The type of tool call. This is always going to be `function` for this type of tool call.
    """
    function: Function5
    """
    The definition of the function that was called.
    """


class Type104(str, Enum):
    """
    Always `tool_calls`.
    """

    tool_calls = 'tool_calls'


class Object49(str, Enum):
    """
    The object type, which is always `thread.run.step`.
    """

    thread_run_step = 'thread.run.step'


class Type105(str, Enum):
    """
    The type of run step, which can be either `message_creation` or `tool_calls`.
    """

    message_creation = 'message_creation'
    tool_calls = 'tool_calls'


class Status9(str, Enum):
    """
    The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
    """

    in_progress = 'in_progress'
    cancelled = 'cancelled'
    failed = 'failed'
    completed = 'completed'
    expired = 'expired'


class Code1(str, Enum):
    """
    One of `server_error` or `rate_limit_exceeded`.
    """

    server_error = 'server_error'
    rate_limit_exceeded = 'rate_limit_exceeded'


class LastError1(Struct):
    """
    The last error associated with this run step. Will be `null` if there are no errors.
    """

    code: Code1
    """
    One of `server_error` or `rate_limit_exceeded`.
    """
    message: str
    """
    A human-readable description of the error.
    """


class Event7(str, Enum):
    thread_run_step_created = 'thread.run.step.created'


class Event8(str, Enum):
    thread_run_step_in_progress = 'thread.run.step.in_progress'


class Event9(str, Enum):
    thread_run_step_delta = 'thread.run.step.delta'


class Event10(str, Enum):
    thread_run_step_completed = 'thread.run.step.completed'


class Event11(str, Enum):
    thread_run_step_failed = 'thread.run.step.failed'


class Event12(str, Enum):
    thread_run_step_cancelled = 'thread.run.step.cancelled'


class Event13(str, Enum):
    thread_run_step_expired = 'thread.run.step.expired'


class Event14(str, Enum):
    thread_run_created = 'thread.run.created'


class Event15(str, Enum):
    thread_run_queued = 'thread.run.queued'


class Event16(str, Enum):
    thread_run_in_progress = 'thread.run.in_progress'


class Event17(str, Enum):
    thread_run_requires_action = 'thread.run.requires_action'


class Event18(str, Enum):
    thread_run_completed = 'thread.run.completed'


class Event19(str, Enum):
    thread_run_incomplete = 'thread.run.incomplete'


class Event20(str, Enum):
    thread_run_failed = 'thread.run.failed'


class Event21(str, Enum):
    thread_run_cancelling = 'thread.run.cancelling'


class Event22(str, Enum):
    thread_run_cancelled = 'thread.run.cancelled'


class Event23(str, Enum):
    thread_run_expired = 'thread.run.expired'


class Type106(str, Enum):
    """
    The type of tool call the output is required for. For now, this is always `function`.
    """

    function = 'function'


class Function6(Struct):
    """
    The function definition.
    """

    name: str
    """
    The name of the function.
    """
    arguments: str
    """
    The arguments that the model expects you to pass to the function.
    """


class RunToolCallObject(Struct):
    """
    Tool call objects
    """

    id: str
    """
    The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
    """
    type: Type106
    """
    The type of tool call the output is required for. For now, this is always `function`.
    """
    function: Function6
    """
    The function definition.
    """


class StaticChunkingStrategy(Struct):
    max_chunk_size_tokens: int
    """
    The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
    """
    chunk_overlap_tokens: int
    """
    The number of tokens that overlap between chunks. The default value is `400`.

    Note that the overlap must not exceed half of `max_chunk_size_tokens`.

    """


class Type107(str, Enum):
    """
    Always `static`.
    """

    static = 'static'


class StaticChunkingStrategyRequestParam(Struct):
    type: Type107
    """
    Always `static`.
    """
    static: StaticChunkingStrategy


class StaticChunkingStrategyResponseParam(Struct):
    type: Type107
    """
    Always `static`.
    """
    static: StaticChunkingStrategy


class ToolOutput(Struct):
    tool_call_id: Optional[str] = None
    """
    The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
    """
    output: Optional[str] = None
    """
    The output of the tool call to be submitted to continue the run.
    """


class SubmitToolOutputsRunRequest(Struct):
    tool_outputs: List[ToolOutput]
    """
    A list of tools for which the outputs are being submitted.
    """
    stream: Optional[bool] = None
    """
    If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.

    """


class Object50(str, Enum):
    """
    The object type, which is always `thread`.
    """

    thread = 'thread'


class ToolResources6(Struct):
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """

    code_interpreter: Optional[CodeInterpreter5] = None
    file_search: Optional[FileSearch8] = None


class ThreadObject(Struct):
    """
    Represents a thread that contains [messages](/docs/api-reference/messages).
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    object: Object50
    """
    The object type, which is always `thread`.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the thread was created.
    """
    tool_resources: Optional[ToolResources6] = None
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class Event24(str, Enum):
    thread_created = 'thread.created'


class ThreadStreamEvent1(Struct):
    """
    Occurs when a new [thread](/docs/api-reference/threads/object) is created.
    """

    event: Event24
    data: ThreadObject
    enabled: Optional[bool] = None
    """
    Whether to enable input audio transcription.
    """


ThreadStreamEvent = ThreadStreamEvent1


class TranscriptionSegment(Struct):
    id: int
    """
    Unique identifier of the segment.
    """
    seek: int
    """
    Seek offset of the segment.
    """
    start: float
    """
    Start time of the segment in seconds.
    """
    end: float
    """
    End time of the segment in seconds.
    """
    text: str
    """
    Text content of the segment.
    """
    tokens: List[int]
    """
    Array of token IDs for the text content.
    """
    temperature: float
    """
    Temperature parameter used for generating the segment.
    """
    avg_logprob: float
    """
    Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
    """
    compression_ratio: float
    """
    Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
    """
    no_speech_prob: float
    """
    Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
    """


class TranscriptionWord(Struct):
    word: str
    """
    The text content of the word.
    """
    start: float
    """
    Start time of the word in seconds.
    """
    end: float
    """
    End time of the word in seconds.
    """


class Type109(str, Enum):
    """
    The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
    """

    auto = 'auto'
    last_messages = 'last_messages'


class TruncationObject(Struct):
    """
    Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
    """

    type: Type109
    """
    The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
    """
    last_messages: Optional[int] = None
    """
    The number of most recent messages from the thread when constructing the context for the run.
    """


class Status10(str, Enum):
    """
    The status of the Upload.
    """

    pending = 'pending'
    completed = 'completed'
    cancelled = 'cancelled'
    expired = 'expired'


class Object51(str, Enum):
    """
    The object type, which is always "upload".
    """

    upload = 'upload'


class Upload(Struct):
    """
    The Upload object can accept byte chunks in the form of Parts.

    """

    id: str
    """
    The Upload unique identifier, which can be referenced in API endpoints.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the Upload was created.
    """
    filename: str
    """
    The name of the file to be uploaded.
    """
    bytes: int
    """
    The intended number of bytes to be uploaded.
    """
    purpose: str
    """
    The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
    """
    status: Status10
    """
    The status of the Upload.
    """
    expires_at: int
    """
    The Unix timestamp (in seconds) for when the Upload was created.
    """
    object: Optional[Object51] = None
    """
    The object type, which is always "upload".
    """
    file: Optional[OpenAIFile] = None
    """
    The ready File object after the Upload is completed.
    """


class Object52(str, Enum):
    """
    The object type, which is always `upload.part`.
    """

    upload_part = 'upload.part'


class UploadPart(Struct):
    """
    The upload Part represents a chunk of bytes we can add to an Upload object.

    """

    id: str
    """
    The upload Part unique identifier, which can be referenced in API endpoints.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the Part was created.
    """
    upload_id: str
    """
    The ID of the Upload object that this Part was added to.
    """
    object: Object52
    """
    The object type, which is always `upload.part`.
    """


class Object53(str, Enum):
    organization_usage_audio_speeches_result = (
        'organization.usage.audio_speeches.result'
    )


class UsageAudioSpeechesResult(Struct):
    """
    The aggregated audio speeches usage details of the specific time bucket.
    """

    object: Object53
    characters: int
    """
    The number of characters processed.
    """
    num_model_requests: int
    """
    The count of requests made to the model.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """
    user_id: Optional[str] = None
    """
    When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    """
    api_key_id: Optional[str] = None
    """
    When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    """
    model: Optional[str] = None
    """
    When `group_by=model`, this field provides the model name of the grouped usage result.
    """


class Object54(str, Enum):
    organization_usage_audio_transcriptions_result = (
        'organization.usage.audio_transcriptions.result'
    )


class UsageAudioTranscriptionsResult(Struct):
    """
    The aggregated audio transcriptions usage details of the specific time bucket.
    """

    object: Object54
    seconds: int
    """
    The number of seconds processed.
    """
    num_model_requests: int
    """
    The count of requests made to the model.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """
    user_id: Optional[str] = None
    """
    When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    """
    api_key_id: Optional[str] = None
    """
    When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    """
    model: Optional[str] = None
    """
    When `group_by=model`, this field provides the model name of the grouped usage result.
    """


class Object55(str, Enum):
    organization_usage_code_interpreter_sessions_result = (
        'organization.usage.code_interpreter_sessions.result'
    )


class UsageCodeInterpreterSessionsResult(Struct):
    """
    The aggregated code interpreter sessions usage details of the specific time bucket.
    """

    object: Object55
    sessions: int
    """
    The number of code interpreter sessions.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """


class Object56(str, Enum):
    organization_usage_completions_result = 'organization.usage.completions.result'


class UsageCompletionsResult(Struct):
    """
    The aggregated completions usage details of the specific time bucket.
    """

    object: Object56
    input_tokens: int
    """
    The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.
    """
    output_tokens: int
    """
    The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.
    """
    num_model_requests: int
    """
    The count of requests made to the model.
    """
    input_cached_tokens: Optional[int] = None
    """
    The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.
    """
    input_audio_tokens: Optional[int] = None
    """
    The aggregated number of audio input tokens used, including cached tokens.
    """
    output_audio_tokens: Optional[int] = None
    """
    The aggregated number of audio output tokens used.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """
    user_id: Optional[str] = None
    """
    When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    """
    api_key_id: Optional[str] = None
    """
    When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    """
    model: Optional[str] = None
    """
    When `group_by=model`, this field provides the model name of the grouped usage result.
    """
    batch: Optional[bool] = None
    """
    When `group_by=batch`, this field tells whether the grouped usage result is batch or not.
    """


class Object57(str, Enum):
    organization_usage_embeddings_result = 'organization.usage.embeddings.result'


class UsageEmbeddingsResult(Struct):
    """
    The aggregated embeddings usage details of the specific time bucket.
    """

    object: Object57
    input_tokens: int
    """
    The aggregated number of input tokens used.
    """
    num_model_requests: int
    """
    The count of requests made to the model.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """
    user_id: Optional[str] = None
    """
    When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    """
    api_key_id: Optional[str] = None
    """
    When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    """
    model: Optional[str] = None
    """
    When `group_by=model`, this field provides the model name of the grouped usage result.
    """


class Object58(str, Enum):
    organization_usage_images_result = 'organization.usage.images.result'


class UsageImagesResult(Struct):
    """
    The aggregated images usage details of the specific time bucket.
    """

    object: Object58
    images: int
    """
    The number of images processed.
    """
    num_model_requests: int
    """
    The count of requests made to the model.
    """
    source: Optional[str] = None
    """
    When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.
    """
    size: Optional[str] = None
    """
    When `group_by=size`, this field provides the image size of the grouped usage result.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """
    user_id: Optional[str] = None
    """
    When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    """
    api_key_id: Optional[str] = None
    """
    When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    """
    model: Optional[str] = None
    """
    When `group_by=model`, this field provides the model name of the grouped usage result.
    """


class Object59(str, Enum):
    organization_usage_moderations_result = 'organization.usage.moderations.result'


class UsageModerationsResult(Struct):
    """
    The aggregated moderations usage details of the specific time bucket.
    """

    object: Object59
    input_tokens: int
    """
    The aggregated number of input tokens used.
    """
    num_model_requests: int
    """
    The count of requests made to the model.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """
    user_id: Optional[str] = None
    """
    When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    """
    api_key_id: Optional[str] = None
    """
    When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    """
    model: Optional[str] = None
    """
    When `group_by=model`, this field provides the model name of the grouped usage result.
    """


class Object60(str, Enum):
    page = 'page'


class Object61(str, Enum):
    bucket = 'bucket'


class Object62(str, Enum):
    organization_usage_vector_stores_result = 'organization.usage.vector_stores.result'


class UsageVectorStoresResult(Struct):
    """
    The aggregated vector stores usage details of the specific time bucket.
    """

    object: Object62
    usage_bytes: int
    """
    The vector stores usage in bytes.
    """
    project_id: Optional[str] = None
    """
    When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    """


class Object63(str, Enum):
    """
    The object type, which is always `organization.user`
    """

    organization_user = 'organization.user'


class Role18(str, Enum):
    """
    `owner` or `reader`
    """

    owner = 'owner'
    reader = 'reader'


class User(Struct):
    """
    Represents an individual `user` within an organization.
    """

    object: Object63
    """
    The object type, which is always `organization.user`
    """
    id: str
    """
    The identifier, which can be referenced in API endpoints
    """
    name: str
    """
    The name of the user
    """
    email: str
    """
    The email address of the user
    """
    role: Role18
    """
    `owner` or `reader`
    """
    added_at: int
    """
    The Unix timestamp (in seconds) of when the user was added.
    """


class Object64(str, Enum):
    organization_user_deleted = 'organization.user.deleted'


class UserDeleteResponse(Struct):
    object: Object64
    id: str
    deleted: bool


class Object65(str, Enum):
    list = 'list'


class UserListResponse(Struct):
    object: Object65
    data: List[User]
    first_id: str
    last_id: str
    has_more: bool


class UserRoleUpdateRequest(Struct):
    role: Role18
    """
    `owner` or `reader`
    """


class Anchor(str, Enum):
    """
    Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
    """

    last_active_at = 'last_active_at'


class VectorStoreExpirationAfter(Struct):
    """
    The expiration policy for a vector store.
    """

    anchor: Anchor
    """
    Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
    """
    days: int
    """
    The number of days after the anchor time that the vector store will expire.
    """


class Object66(str, Enum):
    """
    The object type, which is always `vector_store.file_batch`.
    """

    vector_store_files_batch = 'vector_store.files_batch'


class Status11(str, Enum):
    """
    The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
    """

    in_progress = 'in_progress'
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'


class FileCounts(Struct):
    in_progress: int
    """
    The number of files that are currently being processed.
    """
    completed: int
    """
    The number of files that have been processed.
    """
    failed: int
    """
    The number of files that have failed to process.
    """
    cancelled: int
    """
    The number of files that where cancelled.
    """
    total: int
    """
    The total number of files.
    """


class VectorStoreFileBatchObject(Struct):
    """
    A batch of files attached to a vector store.
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    object: Object66
    """
    The object type, which is always `vector_store.file_batch`.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the vector store files batch was created.
    """
    vector_store_id: str
    """
    The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
    """
    status: Status11
    """
    The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
    """
    file_counts: FileCounts


class Object67(str, Enum):
    """
    The object type, which is always `vector_store.file`.
    """

    vector_store_file = 'vector_store.file'


class Status12(str, Enum):
    """
    The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
    """

    in_progress = 'in_progress'
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'


class Code2(str, Enum):
    """
    One of `server_error` or `rate_limit_exceeded`.
    """

    server_error = 'server_error'
    unsupported_file = 'unsupported_file'
    invalid_file = 'invalid_file'


class LastError2(Struct):
    """
    The last error associated with this vector store file. Will be `null` if there are no errors.
    """

    code: Code2
    """
    One of `server_error` or `rate_limit_exceeded`.
    """
    message: str
    """
    A human-readable description of the error.
    """


class VectorStoreFileObject(Struct):
    """
    A list of files attached to a vector store.
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    object: Object67
    """
    The object type, which is always `vector_store.file`.
    """
    usage_bytes: int
    """
    The total vector store usage in bytes. Note that this may be different from the original file size.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the vector store file was created.
    """
    vector_store_id: str
    """
    The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
    """
    status: Status12
    """
    The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
    """
    last_error: Optional[LastError2] = None
    """
    The last error associated with this vector store file. Will be `null` if there are no errors.
    """
    chunking_strategy: Optional[
        Union[StaticChunkingStrategyResponseParam, OtherChunkingStrategyResponseParam]
    ] = None
    """
    The strategy used to chunk the file.
    """


class Object68(str, Enum):
    """
    The object type, which is always `vector_store`.
    """

    vector_store = 'vector_store'


class FileCounts1(Struct):
    in_progress: int
    """
    The number of files that are currently being processed.
    """
    completed: int
    """
    The number of files that have been successfully processed.
    """
    failed: int
    """
    The number of files that have failed to process.
    """
    cancelled: int
    """
    The number of files that were cancelled.
    """
    total: int
    """
    The total number of files.
    """


class Status13(str, Enum):
    """
    The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
    """

    expired = 'expired'
    in_progress = 'in_progress'
    completed = 'completed'


class VectorStoreObject(Struct):
    """
    A vector store is a collection of processed files can be used by the `file_search` tool.
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    object: Object68
    """
    The object type, which is always `vector_store`.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the vector store was created.
    """
    name: str
    """
    The name of the vector store.
    """
    usage_bytes: int
    """
    The total number of bytes used by the files in the vector store.
    """
    file_counts: FileCounts1
    status: Status13
    """
    The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
    """
    last_active_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the vector store was last active.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    expires_after: Optional[VectorStoreExpirationAfter] = None
    expires_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the vector store will expire.
    """


class FileSearch1(Struct):
    """
    Overrides for the file search tool.
    """

    max_num_results: Optional[int] = None
    """
    The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.

    Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.

    """
    ranking_options: Optional[FileSearchRankingOptions] = None


class AssistantToolsFileSearch(Struct):
    type: Type1
    """
    The type of tool being defined: `file_search`
    """
    file_search: Optional[FileSearch1] = None
    """
    Overrides for the file search tool.
    """


AssistantsApiToolChoiceOption = Union[
    AssistantsApiToolChoiceOption1, AssistantsNamedToolChoice
]


class AuditLogActorApiKey(Struct):
    """
    The API Key used to perform the audit logged action.
    """

    id: Optional[str] = None
    """
    The tracking id of the API key.
    """
    type: Optional[Type6] = None
    """
    The type of API key. Can be either `user` or `service_account`.
    """
    user: Optional[AuditLogActorUser] = None
    service_account: Optional[AuditLogActorServiceAccount] = None


class AuditLogActorSession(Struct):
    """
    The session in which the audit logged action was performed.
    """

    user: Optional[AuditLogActorUser] = None
    ip_address: Optional[str] = None
    """
    The IP address from which the action was performed.
    """


class ChatCompletionFunctions(Struct):
    name: str
    """
    The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    """
    description: Optional[str] = None
    """
    A description of what the function does, used by the model to choose when and how to call the function.
    """
    parameters: Optional[FunctionParameters] = None


ChatCompletionRequestAssistantMessageContentPart = Union[
    ChatCompletionRequestMessageContentPartText,
    ChatCompletionRequestMessageContentPartRefusal,
]


Content1 = List[ChatCompletionRequestSystemMessageContentPart]


class ChatCompletionRequestSystemMessage(Struct):
    content: Union[str, Content1]
    """
    The contents of the system message.
    """
    role: Role2
    """
    The role of the messages author, in this case `system`.
    """
    name: Optional[str] = None
    """
    An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    """


Content2 = List[ChatCompletionRequestToolMessageContentPart]


class ChatCompletionRequestToolMessage(Struct):
    role: Role3
    """
    The role of the messages author, in this case `tool`.
    """
    content: Union[str, Content2]
    """
    The contents of the tool message.
    """
    tool_call_id: str
    """
    Tool call that this message is responding to.
    """


Content3 = List[ChatCompletionRequestUserMessageContentPart]


class ChatCompletionRequestUserMessage(Struct):
    content: Union[str, Content3]
    """
    The contents of the user message.

    """
    role: Role4
    """
    The role of the messages author, in this case `user`.
    """
    name: Optional[str] = None
    """
    An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    """


ChunkingStrategyRequestParam = Union[
    AutoChunkingStrategyRequestParam, StaticChunkingStrategyRequestParam
]


class CreateEmbeddingResponse(Struct):
    data: List[Embedding]
    """
    The list of embeddings generated by the model.
    """
    model: str
    """
    The name of the model used to generate the embedding.
    """
    object: Object7
    """
    The object type, which is always "list".
    """
    usage: Usage1
    """
    The usage information for the request.
    """


Content4 = List[
    Union[
        MessageContentImageFileObject,
        MessageContentImageUrlObject,
        MessageRequestContentTextObject,
    ]
]


class CreateMessageRequest(Struct):
    role: Role7
    """
    The role of the entity that is creating the message. Allowed values include:
    - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
    - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.

    """
    content: Union[str, Content4]
    attachments: Optional[List[Attachment]] = None
    """
    A list of files attached to the message, and the tools they should be added to.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class CreateThreadRequest(Struct):
    messages: Optional[List[CreateMessageRequest]] = None
    """
    A list of [messages](/docs/api-reference/messages) to start the thread with.
    """
    tool_resources: Optional[ToolResources3] = None
    """
    A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class CreateTranscriptionResponseVerboseJson(Struct):
    """
    Represents a verbose json transcription response returned by model, based on the provided input.
    """

    language: str
    """
    The language of the input audio.
    """
    duration: str
    """
    The duration of the input audio.
    """
    text: str
    """
    The transcribed text.
    """
    words: Optional[List[TranscriptionWord]] = None
    """
    Extracted words and their corresponding timestamps.
    """
    segments: Optional[List[TranscriptionSegment]] = None
    """
    Segments of the transcribed text and their corresponding details.
    """


class CreateTranslationResponseVerboseJson(Struct):
    language: str
    """
    The language of the output translation (always `english`).
    """
    duration: str
    """
    The duration of the input audio.
    """
    text: str
    """
    The translated text.
    """
    segments: Optional[List[TranscriptionSegment]] = None
    """
    Segments of the translated text and their corresponding details.
    """


class CreateVectorStoreFileBatchRequest(Struct):
    file_ids: List[str]
    """
    A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
    """
    chunking_strategy: Optional[ChunkingStrategyRequestParam] = None


class CreateVectorStoreFileRequest(Struct):
    file_id: str
    """
    A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
    """
    chunking_strategy: Optional[ChunkingStrategyRequestParam] = None


class CreateVectorStoreRequest(Struct):
    file_ids: Optional[List[str]] = None
    """
    A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
    """
    name: Optional[str] = None
    """
    The name of the vector store.
    """
    expires_after: Optional[VectorStoreExpirationAfter] = None
    chunking_strategy: Optional[
        Union[AutoChunkingStrategyRequestParam, StaticChunkingStrategyRequestParam]
    ] = None
    """
    The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class FunctionObject(Struct):
    name: str
    """
    The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    """
    description: Optional[str] = None
    """
    A description of what the function does, used by the model to choose when and how to call the function.
    """
    parameters: Optional[FunctionParameters] = None
    strict: Optional[bool] = False
    """
    Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
    """


class ListFilesResponse(Struct):
    object: str
    data: List[OpenAIFile]
    first_id: str
    last_id: str
    has_more: bool


class ListMessagesResponse(Struct):
    object: str
    data: List[MessageObject]
    first_id: str
    last_id: str
    has_more: bool


class ListModelsResponse(Struct):
    object: Object21
    data: List[ModelModel]


class ListThreadsResponse(Struct):
    object: str
    data: List[ThreadObject]
    first_id: str
    last_id: str
    has_more: bool


class ListVectorStoreFilesResponse(Struct):
    object: str
    data: List[VectorStoreFileObject]
    first_id: str
    last_id: str
    has_more: bool


class ListVectorStoresResponse(Struct):
    object: str
    data: List[VectorStoreObject]
    first_id: str
    last_id: str
    has_more: bool


class Owner(Struct):
    type: Optional[Type43] = None
    """
    `user` or `service_account`
    """
    user: Optional[ProjectUser] = None
    service_account: Optional[ProjectServiceAccount] = None


class ProjectApiKey(Struct):
    """
    Represents an individual API key in a project.
    """

    object: Object32
    """
    The object type, which is always `organization.project.api_key`
    """
    redacted_value: str
    """
    The redacted value of the API key
    """
    name: str
    """
    The name of the API key
    """
    created_at: int
    """
    The Unix timestamp (in seconds) of when the API key was created
    """
    id: str
    """
    The identifier, which can be referenced in API endpoints
    """
    owner: Owner


class ProjectApiKeyListResponse(Struct):
    object: Object34
    data: List[ProjectApiKey]
    first_id: str
    last_id: str
    has_more: bool


class RealtimeClientEventConversationItemCreate(Struct):
    """
    Add a new Item to the Conversation's context, including messages, function
    calls, and function call responses. This event can be used both to populate a
    "history" of the conversation and to add new items mid-stream, but has the
    current limitation that it cannot populate assistant audio messages.

    If successful, the server will respond with a `conversation.item.created`
    event, otherwise an `error` event will be sent.

    """

    type: Type44
    """
    The event type, must be `conversation.item.create`.
    """
    item: RealtimeConversationItem
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """
    previous_item_id: Optional[str] = None
    """
    The ID of the preceding item after which the new item will be inserted. 
    If not set, the new item will be appended to the end of the conversation. 
    If set, it allows an item to be inserted mid-conversation. If the ID 
    cannot be found, an error will be returned and the item will not be added.

    """


class RealtimeClientEventResponseCreate(Struct):
    """
    This event instructs the server to create a Response, which means triggering
    model inference. When in Server VAD mode, the server will create Responses
    automatically.

    A Response will include at least one Item, and may have two, in which case
    the second will be a function call. These Items will be appended to the
    conversation history.

    The server will respond with a `response.created` event, events for Items
    and content created, and finally a `response.done` event to indicate the
    Response is complete.

    The `response.create` event includes inference configuration like
    `instructions`, and `temperature`. These fields will override the Session's
    configuration for this Response only.

    """

    type: Type51
    """
    The event type, must be `response.create`.
    """
    response: RealtimeSession
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class RealtimeClientEventSessionUpdate(Struct):
    """
    Send this event to update the session’s default configuration. The client may
    send this event at any time to update the session configuration, and any
    field may be updated at any time, except for "voice". The server will respond
    with a `session.updated` event that shows the full effective configuration.
    Only fields that are present are updated, thus the correct way to clear a
    field like "instructions" is to pass an empty string.

    """

    type: Type52
    """
    The event type, must be `session.update`.
    """
    session: RealtimeSession
    event_id: Optional[str] = None
    """
    Optional client-generated ID used to identify this event.
    """


class RealtimeServerEventSessionCreated(Struct):
    """
    Returned when a Session is created. Emitted automatically when a new
    connection is established as the first server event. This event will contain
    the default Session configuration.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type83
    """
    The event type, must be `session.created`.
    """
    session: RealtimeSession


class RealtimeServerEventSessionUpdated(Struct):
    """
    Returned when a session is updated with a `session.update` event, unless
    there is an error.

    """

    event_id: str
    """
    The unique ID of the server event.
    """
    type: Type84
    """
    The event type, must be `session.updated`.
    """
    session: RealtimeSession


class JsonSchema(Struct):
    name: str
    """
    The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    """
    description: Optional[str] = None
    """
    A description of what the response format is for, used by the model to determine how to respond in the format.
    """
    schema_: Optional[ResponseFormatJsonSchemaSchema] = field(
        name='schema', default=None
    )
    strict: Optional[bool] = False
    """
    Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
    """


class ResponseFormatJsonSchema(Struct):
    type: Type87
    """
    The type of response format being defined: `json_schema`
    """
    json_schema: JsonSchema


class SubmitToolOutputs(Struct):
    """
    Details on the tool outputs needed for this run to continue.
    """

    tool_calls: List[RunToolCallObject]
    """
    A list of the relevant tool calls.
    """


class RequiredAction(Struct):
    """
    Details on the action required to continue the run. Will be `null` if no action is required.
    """

    type: Type89
    """
    For now, this is always `submit_tool_outputs`.
    """
    submit_tool_outputs: SubmitToolOutputs
    """
    Details on the tool outputs needed for this run to continue.
    """


class CodeInterpreter6(Struct):
    """
    The Code Interpreter tool call definition.
    """

    input: Optional[str] = None
    """
    The input to the Code Interpreter tool call.
    """
    outputs: Optional[
        List[
            Union[
                RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject,
                RunStepDeltaStepDetailsToolCallsCodeOutputImageObject,
            ]
        ]
    ] = None
    """
    The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
    """


class RunStepDeltaStepDetailsToolCallsCodeObject(Struct):
    """
    Details of the Code Interpreter tool call the run step was involved in.
    """

    index: int
    """
    The index of the tool call in the tool calls array.
    """
    type: Type91
    """
    The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
    """
    id: Optional[str] = None
    """
    The ID of the tool call.
    """
    code_interpreter: Optional[CodeInterpreter6] = None
    """
    The Code Interpreter tool call definition.
    """


class RunStepDeltaStepDetailsToolCallsObject(Struct):
    """
    Details of the tool call.
    """

    type: Type96
    """
    Always `tool_calls`.
    """
    tool_calls: Optional[
        List[
            Union[
                RunStepDeltaStepDetailsToolCallsCodeObject,
                RunStepDeltaStepDetailsToolCallsFileSearchObject,
                RunStepDeltaStepDetailsToolCallsFunctionObject,
            ]
        ]
    ] = None
    """
    An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.

    """


class CodeInterpreter7(Struct):
    """
    The Code Interpreter tool call definition.
    """

    input: str
    """
    The input to the Code Interpreter tool call.
    """
    outputs: List[
        Union[
            RunStepDetailsToolCallsCodeOutputLogsObject,
            RunStepDetailsToolCallsCodeOutputImageObject,
        ]
    ]
    """
    The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
    """


class RunStepDetailsToolCallsCodeObject(Struct):
    """
    Details of the Code Interpreter tool call the run step was involved in.
    """

    id: str
    """
    The ID of the tool call.
    """
    type: Type98
    """
    The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
    """
    code_interpreter: CodeInterpreter7
    """
    The Code Interpreter tool call definition.
    """


class FileSearch9(Struct):
    """
    For now, this is always going to be an empty object.
    """

    ranking_options: Optional[RunStepDetailsToolCallsFileSearchRankingOptionsObject] = (
        None
    )
    results: Optional[List[RunStepDetailsToolCallsFileSearchResultObject]] = None
    """
    The results of the file search.
    """


class RunStepDetailsToolCallsFileSearchObject(Struct):
    id: str
    """
    The ID of the tool call object.
    """
    type: Type101
    """
    The type of tool call. This is always going to be `file_search` for this type of tool call.
    """
    file_search: FileSearch9
    """
    For now, this is always going to be an empty object.
    """


class RunStepDetailsToolCallsObject(Struct):
    """
    Details of the tool call.
    """

    type: Type104
    """
    Always `tool_calls`.
    """
    tool_calls: List[
        Union[
            RunStepDetailsToolCallsCodeObject,
            RunStepDetailsToolCallsFileSearchObject,
            RunStepDetailsToolCallsFunctionObject,
        ]
    ]
    """
    An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.

    """


class RunStepObject(Struct):
    """
    Represents a step in execution of a run.

    """

    id: str
    """
    The identifier of the run step, which can be referenced in API endpoints.
    """
    object: Object49
    """
    The object type, which is always `thread.run.step`.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the run step was created.
    """
    assistant_id: str
    """
    The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
    """
    thread_id: str
    """
    The ID of the [thread](/docs/api-reference/threads) that was run.
    """
    run_id: str
    """
    The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
    """
    type: Type105
    """
    The type of run step, which can be either `message_creation` or `tool_calls`.
    """
    status: Status9
    """
    The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
    """
    step_details: Union[
        RunStepDetailsMessageCreationObject, RunStepDetailsToolCallsObject
    ]
    """
    The details of the run step.
    """
    last_error: Optional[LastError1] = None
    """
    The last error associated with this run step. Will be `null` if there are no errors.
    """
    expired_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
    """
    cancelled_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run step was cancelled.
    """
    failed_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run step failed.
    """
    completed_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run step completed.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    usage: RunStepCompletionUsage


class RunStepStreamEvent1(Struct):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) is created.
    """

    event: Event7
    data: RunStepObject


class RunStepStreamEvent2(Struct):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) moves to an `in_progress` state.
    """

    event: Event8
    data: RunStepObject


class RunStepStreamEvent4(Struct):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) is completed.
    """

    event: Event10
    data: RunStepObject


class RunStepStreamEvent5(Struct):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) fails.
    """

    event: Event11
    data: RunStepObject


class RunStepStreamEvent6(Struct):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) is cancelled.
    """

    event: Event12
    data: RunStepObject


class RunStepStreamEvent7(Struct):
    """
    Occurs when a [run step](/docs/api-reference/run-steps/step-object) expires.
    """

    event: Event13
    data: RunStepObject


class UpdateVectorStoreRequest(Struct):
    name: Optional[str] = None
    """
    The name of the vector store.
    """
    expires_after: Optional[VectorStoreExpirationAfter] = None
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """


class UsageTimeBucket(Struct):
    object: Object61
    start_time: int
    end_time: int
    result: List[
        Union[
            UsageCompletionsResult,
            UsageEmbeddingsResult,
            UsageModerationsResult,
            UsageImagesResult,
            UsageAudioSpeechesResult,
            UsageAudioTranscriptionsResult,
            UsageVectorStoresResult,
            UsageCodeInterpreterSessionsResult,
            CostsResult,
        ]
    ]


class AssistantToolsFunction(Struct):
    type: Type3
    """
    The type of tool being defined: `function`
    """
    function: FunctionObject


AssistantsApiResponseFormatOption = Union[
    AssistantsApiResponseFormatOption1,
    ResponseFormatText,
    ResponseFormatJsonObject,
    ResponseFormatJsonSchema,
]


class AuditLogActor(Struct):
    """
    The actor who performed the audit logged action.
    """

    type: Optional[Type5] = None
    """
    The type of actor. Is either `session` or `api_key`.
    """
    session: Optional[AuditLogActorSession] = None
    api_key: Optional[AuditLogActorApiKey] = None


Content = Optional[List[ChatCompletionRequestAssistantMessageContentPart]]


class ChatCompletionRequestAssistantMessage(Struct):
    role: Role
    """
    The role of the messages author, in this case `assistant`.
    """
    content: Optional[Union[Optional[str], Content]] = None
    """
    The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.

    """
    refusal: Optional[str] = None
    """
    The refusal message by the assistant.
    """
    name: Optional[str] = None
    """
    An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    """
    audio: Optional[Audio] = None
    """
    Data about a previous audio response from the model. 
    [Learn more](/docs/guides/audio).

    """
    tool_calls: Optional[ChatCompletionMessageToolCalls] = None
    function_call: Optional[FunctionCall] = None
    """
    Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
    """


ChatCompletionRequestMessage = Union[
    ChatCompletionRequestSystemMessage,
    ChatCompletionRequestUserMessage,
    ChatCompletionRequestAssistantMessage,
    ChatCompletionRequestToolMessage,
    ChatCompletionRequestFunctionMessage,
]


class ChatCompletionTool(Struct):
    type: Type15
    """
    The type of the tool. Currently, only `function` is supported.
    """
    function: FunctionObject


class CreateAssistantRequest(Struct):
    model: Union[str, Model]
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """
    name: Optional[str] = None
    """
    The name of the assistant. The maximum length is 256 characters.

    """
    description: Optional[str] = None
    """
    The description of the assistant. The maximum length is 512 characters.

    """
    instructions: Optional[str] = None
    """
    The system instructions that the assistant uses. The maximum length is 256,000 characters.

    """
    tools: List[
        Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
    ] = []
    """
    A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.

    """
    tool_resources: Optional[ToolResources1] = None
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    """
    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or temperature but not both.

    """
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class CreateChatCompletionRequest(Struct):
    messages: List[ChatCompletionRequestMessage]
    """
    A list of messages comprising the conversation so far. Depending on the
    [model](/docs/models) you use, different message types (modalities) are
    supported, like [text](/docs/guides/text-generation),
    [images](/docs/guides/vision), and [audio](/docs/guides/audio).

    """
    model: Union[str, Model1]
    """
    ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
    """
    store: Optional[bool] = False
    """
    Whether or not to store the output of this chat completion request
    for use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.

    """
    metadata: Optional[Dict[str, str]] = None
    """
    Developer-defined tags and values used for filtering completions
    in the [dashboard](https://platform.openai.com/chat-completions).

    """
    frequency_penalty: Optional[float] = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

    [See more information about frequency and presence penalties.](/docs/guides/text-generation)

    """
    logit_bias: Optional[Dict[str, int]] = None
    """
    Modify the likelihood of specified tokens appearing in the completion.

    Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

    """
    logprobs: Optional[bool] = False
    """
    Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
    """
    top_logprobs: Optional[int] = None
    """
    An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
    """
    max_tokens: Optional[int] = None
    """
    The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.

    This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).

    """
    max_completion_tokens: Optional[int] = None
    """
    An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).

    """
    n: Optional[int] = 1
    """
    How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    """
    modalities: Optional[ChatCompletionModalities] = None
    prediction: Optional[PredictionContent] = None
    """
    Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
    which can greatly improve response times when large parts of the model
    response are known ahead of time. This is most common when you are
    regenerating a file with only minor changes to most of the content.

    """
    audio: Optional[Audio2] = None
    """
    Parameters for audio output. Required when audio output is requested with
    `modalities: ["audio"]`. [Learn more](/docs/guides/audio).

    """
    presence_penalty: Optional[float] = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

    [See more information about frequency and presence penalties.](/docs/guides/text-generation)

    """
    response_format: Optional[
        Union[ResponseFormatText, ResponseFormatJsonObject, ResponseFormatJsonSchema]
    ] = None
    """
    An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4o mini](/docs/models#gpt-4o-mini), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

    Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).

    Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.

    **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.

    """
    seed: Optional[int] = None
    """
    This feature is in Beta.
    If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
    Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.

    """
    service_tier: Optional[ServiceTier] = 'auto'
    """
    Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
      - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
      - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
      - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
      - When not set, the default behavior is 'auto'.

      When this parameter is set, the response body will include the `service_tier` utilized.

    """
    stop: Union[Optional[str], Stop] = None
    """
    Up to 4 sequences where the API will stop generating further tokens.

    """
    stream: Optional[bool] = False
    """
    If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).

    """
    stream_options: Optional[ChatCompletionStreamOptions] = None
    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    tools: Optional[List[ChatCompletionTool]] = None
    """
    A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.

    """
    tool_choice: Optional[ChatCompletionToolChoiceOption] = None
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    user: Optional[str] = None
    """
    A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

    """
    function_call: Optional[Union[FunctionCall3, ChatCompletionFunctionCallOption]] = (
        None
    )
    """
    Deprecated in favor of `tool_choice`.

    Controls which (if any) function is called by the model.
    `none` means the model will not call a function and instead generates a message.
    `auto` means the model can pick between generating a message or calling a function.
    Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.

    `none` is the default when no functions are present. `auto` is the default if functions are present.

    """
    functions: Optional[List[ChatCompletionFunctions]] = None
    """
    Deprecated in favor of `tools`.

    A list of functions the model may generate JSON inputs for.

    """


class CreateRunRequest(Struct):
    assistant_id: str
    """
    The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
    """
    model: Optional[Union[Optional[str], Model9]] = None
    """
    The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
    """
    instructions: Optional[str] = None
    """
    Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
    """
    additional_instructions: Optional[str] = None
    """
    Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
    """
    additional_messages: Optional[List[CreateMessageRequest]] = None
    """
    Adds additional messages to the thread before creating the run.
    """
    tools: Optional[
        List[
            Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
        ]
    ] = None
    """
    Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    """
    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or temperature but not both.

    """
    stream: Optional[bool] = None
    """
    If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.

    """
    max_prompt_tokens: Optional[int] = None
    """
    The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.

    """
    max_completion_tokens: Optional[int] = None
    """
    The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.

    """
    truncation_strategy: Optional[TruncationObject] = None
    tool_choice: Optional[AssistantsApiToolChoiceOption] = None
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class CreateThreadAndRunRequest(Struct):
    assistant_id: str
    """
    The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
    """
    thread: Optional[CreateThreadRequest] = None
    """
    If no thread is provided, an empty thread will be created.
    """
    model: Optional[Union[Optional[str], Model11]] = None
    """
    The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
    """
    instructions: Optional[str] = None
    """
    Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
    """
    tools: Optional[
        List[
            Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
        ]
    ] = None
    """
    Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
    """
    tool_resources: Optional[ToolResources2] = None
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    """
    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or temperature but not both.

    """
    stream: Optional[bool] = None
    """
    If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.

    """
    max_prompt_tokens: Optional[int] = None
    """
    The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.

    """
    max_completion_tokens: Optional[int] = None
    """
    The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.

    """
    truncation_strategy: Optional[TruncationObject] = None
    tool_choice: Optional[AssistantsApiToolChoiceOption] = None
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class FineTuneChatCompletionRequestAssistantMessage(
    ChatCompletionRequestAssistantMessage
):
    role: Role
    """
    The role of the messages author, in this case `assistant`.
    """
    weight: Optional[Weight] = None
    """
    Controls whether the assistant message is trained against (0 or 1)
    """


class FinetuneChatRequestInput(Struct):
    """
    The per-line training example of a fine-tuning input file for chat models
    """

    messages: Optional[
        List[
            Union[
                ChatCompletionRequestSystemMessage,
                ChatCompletionRequestUserMessage,
                FineTuneChatCompletionRequestAssistantMessage,
                ChatCompletionRequestToolMessage,
                ChatCompletionRequestFunctionMessage,
            ]
        ]
    ] = None
    tools: Optional[List[ChatCompletionTool]] = None
    """
    A list of tools the model may generate JSON inputs for.
    """
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    functions: Optional[List[ChatCompletionFunctions]] = None
    """
    A list of functions the model may generate JSON inputs for.
    """


class ListRunStepsResponse(Struct):
    object: str
    data: List[RunStepObject]
    first_id: str
    last_id: str
    has_more: bool


class ModifyAssistantRequest(Struct):
    model: Optional[str] = None
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """
    name: Optional[str] = None
    """
    The name of the assistant. The maximum length is 256 characters.

    """
    description: Optional[str] = None
    """
    The description of the assistant. The maximum length is 512 characters.

    """
    instructions: Optional[str] = None
    """
    The system instructions that the assistant uses. The maximum length is 256,000 characters.

    """
    tools: List[
        Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
    ] = []
    """
    A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.

    """
    tool_resources: Optional[ToolResources4] = None
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    """
    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or temperature but not both.

    """
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class RunObject(Struct):
    """
    Represents an execution run on a [thread](/docs/api-reference/threads).
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    object: Object47
    """
    The object type, which is always `thread.run`.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the run was created.
    """
    thread_id: str
    """
    The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
    """
    assistant_id: str
    """
    The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
    """
    status: Status8
    """
    The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
    """
    required_action: Optional[RequiredAction] = None
    """
    Details on the action required to continue the run. Will be `null` if no action is required.
    """
    last_error: Optional[LastError] = None
    """
    The last error associated with this run. Will be `null` if there are no errors.
    """
    expires_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run will expire.
    """
    started_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run was started.
    """
    cancelled_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run was cancelled.
    """
    failed_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run failed.
    """
    completed_at: Optional[int] = None
    """
    The Unix timestamp (in seconds) for when the run was completed.
    """
    incomplete_details: Optional[IncompleteDetails1] = None
    """
    Details on why the run is incomplete. Will be `null` if the run is not incomplete.
    """
    model: str
    """
    The model that the [assistant](/docs/api-reference/assistants) used for this run.
    """
    instructions: str
    """
    The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
    """
    tools: List[
        Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
    ]
    """
    The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    usage: RunCompletionUsage
    max_prompt_tokens: Optional[int] = None
    """
    The maximum number of prompt tokens specified to have been used over the course of the run.

    """
    max_completion_tokens: Optional[int] = None
    """
    The maximum number of completion tokens specified to have been used over the course of the run.

    """
    truncation_strategy: Optional[TruncationObject] = None
    tool_choice: Optional[AssistantsApiToolChoiceOption] = None
    parallel_tool_calls: ParallelToolCalls
    response_format: Optional[AssistantsApiResponseFormatOption] = None
    temperature: Optional[float] = None
    """
    The sampling temperature used for this run. If not set, defaults to 1.
    """
    top_p: Optional[float] = None
    """
    The nucleus sampling value used for this run. If not set, defaults to 1.
    """


class Delta1(Struct):
    """
    The delta containing the fields that have changed on the run step.
    """

    step_details: Optional[
        Union[
            RunStepDeltaStepDetailsMessageCreationObject,
            RunStepDeltaStepDetailsToolCallsObject,
        ]
    ] = None
    """
    The details of the run step.
    """


class RunStepDeltaObject(Struct):
    """
    Represents a run step delta i.e. any changed fields on a run step during streaming.

    """

    id: str
    """
    The identifier of the run step, which can be referenced in API endpoints.
    """
    object: Object48
    """
    The object type, which is always `thread.run.step.delta`.
    """
    delta: Delta1
    """
    The delta containing the fields that have changed on the run step.
    """


class RunStepStreamEvent3(Struct):
    """
    Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object) are being streamed.
    """

    event: Event9
    data: RunStepDeltaObject


RunStepStreamEvent = Union[
    RunStepStreamEvent1,
    RunStepStreamEvent2,
    RunStepStreamEvent3,
    RunStepStreamEvent4,
    RunStepStreamEvent5,
    RunStepStreamEvent6,
    RunStepStreamEvent7,
]


class RunStreamEvent1(Struct):
    """
    Occurs when a new [run](/docs/api-reference/runs/object) is created.
    """

    event: Event14
    data: RunObject


class RunStreamEvent2(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
    """

    event: Event15
    data: RunObject


class RunStreamEvent3(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
    """

    event: Event16
    data: RunObject


class RunStreamEvent4(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
    """

    event: Event17
    data: RunObject


class RunStreamEvent5(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) is completed.
    """

    event: Event18
    data: RunObject


class RunStreamEvent6(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) ends with status `incomplete`.
    """

    event: Event19
    data: RunObject


class RunStreamEvent7(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) fails.
    """

    event: Event20
    data: RunObject


class RunStreamEvent8(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
    """

    event: Event21
    data: RunObject


class RunStreamEvent9(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
    """

    event: Event22
    data: RunObject


class RunStreamEvent10(Struct):
    """
    Occurs when a [run](/docs/api-reference/runs/object) expires.
    """

    event: Event23
    data: RunObject


RunStreamEvent = Union[
    RunStreamEvent1,
    RunStreamEvent2,
    RunStreamEvent3,
    RunStreamEvent4,
    RunStreamEvent5,
    RunStreamEvent6,
    RunStreamEvent7,
    RunStreamEvent8,
    RunStreamEvent9,
    RunStreamEvent10,
]


class UsageResponse(Struct):
    object: Object60
    data: List[UsageTimeBucket]
    has_more: bool
    next_page: str


class AssistantObject(Struct):
    """
    Represents an `assistant` that can call the model and use tools.
    """

    id: str
    """
    The identifier, which can be referenced in API endpoints.
    """
    object: Object
    """
    The object type, which is always `assistant`.
    """
    created_at: int
    """
    The Unix timestamp (in seconds) for when the assistant was created.
    """
    name: Optional[str] = None
    """
    The name of the assistant. The maximum length is 256 characters.

    """
    description: Optional[str] = None
    """
    The description of the assistant. The maximum length is 512 characters.

    """
    model: str
    """
    ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.

    """
    instructions: Optional[str] = None
    """
    The system instructions that the assistant uses. The maximum length is 256,000 characters.

    """
    tools: List[
        Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
    ]
    """
    A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.

    """
    metadata: Optional[Dict[str, Any]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.

    """
    tool_resources: Optional[ToolResources] = None
    """
    A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.

    """
    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    """
    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or temperature but not both.

    """
    response_format: Optional[AssistantsApiResponseFormatOption] = None


AssistantStreamEvent = Union[
    ThreadStreamEvent,
    RunStreamEvent,
    RunStepStreamEvent,
    MessageStreamEvent,
    ErrorEvent,
    DoneEvent,
]


class AuditLog(Struct):
    """
    A log of a user action or configuration change within this organization.
    """

    id: str
    """
    The ID of this log.
    """
    type: AuditLogEventType
    effective_at: int
    """
    The Unix timestamp (in seconds) of the event.
    """
    actor: AuditLogActor
    project: Optional[Project] = None
    """
    The project that the action was scoped to. Absent for actions not scoped to projects.
    """
    api_key_created: Optional[ApiKeyCreated] = field(
        name='api_key.created', default=None
    )
    """
    The details for events with this `type`.
    """
    api_key_updated: Optional[ApiKeyUpdated] = field(
        name='api_key.updated', default=None
    )
    """
    The details for events with this `type`.
    """
    api_key_deleted: Optional[ApiKeyDeleted] = field(
        name='api_key.deleted', default=None
    )
    """
    The details for events with this `type`.
    """
    invite_sent: Optional[InviteSent] = field(name='invite.sent', default=None)
    """
    The details for events with this `type`.
    """
    invite_accepted: Optional[InviteAccepted] = field(
        name='invite.accepted', default=None
    )
    """
    The details for events with this `type`.
    """
    invite_deleted: Optional[InviteDeleted] = field(name='invite.deleted', default=None)
    """
    The details for events with this `type`.
    """
    login_failed: Optional[LoginFailed] = field(name='login.failed', default=None)
    """
    The details for events with this `type`.
    """
    logout_failed: Optional[LogoutFailed] = field(name='logout.failed', default=None)
    """
    The details for events with this `type`.
    """
    organization_updated: Optional[OrganizationUpdated] = field(
        name='organization.updated', default=None
    )
    """
    The details for events with this `type`.
    """
    project_created: Optional[ProjectCreated] = field(
        name='project.created', default=None
    )
    """
    The details for events with this `type`.
    """
    project_updated: Optional[ProjectUpdated] = field(
        name='project.updated', default=None
    )
    """
    The details for events with this `type`.
    """
    project_archived: Optional[ProjectArchived] = field(
        name='project.archived', default=None
    )
    """
    The details for events with this `type`.
    """
    rate_limit_updated: Optional[RateLimitUpdated] = field(
        name='rate_limit.updated', default=None
    )
    """
    The details for events with this `type`.
    """
    rate_limit_deleted: Optional[RateLimitDeleted] = field(
        name='rate_limit.deleted', default=None
    )
    """
    The details for events with this `type`.
    """
    service_account_created: Optional[ServiceAccountCreated] = field(
        name='service_account.created', default=None
    )
    """
    The details for events with this `type`.
    """
    service_account_updated: Optional[ServiceAccountUpdated] = field(
        name='service_account.updated', default=None
    )
    """
    The details for events with this `type`.
    """
    service_account_deleted: Optional[ServiceAccountDeleted] = field(
        name='service_account.deleted', default=None
    )
    """
    The details for events with this `type`.
    """
    user_added: Optional[UserAdded] = field(name='user.added', default=None)
    """
    The details for events with this `type`.
    """
    user_updated: Optional[UserUpdated] = field(name='user.updated', default=None)
    """
    The details for events with this `type`.
    """
    user_deleted: Optional[UserDeleted] = field(name='user.deleted', default=None)
    """
    The details for events with this `type`.
    """


class ListAssistantsResponse(Struct):
    object: str
    data: List[AssistantObject]
    first_id: str
    last_id: str
    has_more: bool


class ListAuditLogsResponse(Struct):
    object: Object21
    data: List[AuditLog]
    first_id: str
    last_id: str
    has_more: bool


class ListRunsResponse(Struct):
    object: str
    data: List[RunObject]
    first_id: str
    last_id: str
    has_more: bool
